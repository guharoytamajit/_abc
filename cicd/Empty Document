


Repositories:
Can be defined in two places:
1)pox.xml : only applies to current project
2)settings.xml: applies to all projects


Repository Element
• id - unique value required
• name - human readable name
• url - URL for repository
• layout - legacy or default (Default is generally used)
• releases - Repository Policy for handling downloading of releases
• snapshots - Repository Policy for handling downloading of snapshots 


Repository Policy:
• Used for release and snapshot elements of Repository definitions
• enabled - true / false
• updatePolicy - always, daily (default), interval:XXX (xxx in minutes), never
• checksumPolicy - What to do if verification of artifact fails
• values: ignore, fail, warn
----------------
distributionManagement:

Repositories declared under the distributionManagement element will be used for deployment, i.e. when running mvn deploy

<distributionManagement>
    <repository>
        <id>...</id>
        <name>...</name>
        <url>...</url>
    </repository>
</distributionManagement> 
-------------------------------------------------
repositories:

The repositories element will be used for downloading dependencies of the project. The command is not necessarily mvn install but any command that requires Maven to fetch artifacts from a repository.

<repositories>
    <repository>
        <id>...</id>
        <name>...</name>
        <layout>default</layout>
        <url>...</url>
    </repository>
</repositories>
--------------------------------------
Mirror:
Mirror is equivalent to an interceptor. It intercepts maven's requests for remote repository, redirects the remote repository address in the request to the address configured in mirror.

 You may want to use an alternative mirror for a particular repository without changing the project files.

Some reasons to use a mirror are:

-There is a synchronized mirror on the internet that is geographically closer and faster
-You want to replace a particular repository with your own internal repository which you have greater control over
-You want to run a repository manager to provide a local cache to a mirror and need to use its URL instead
Note that there can be at most one mirror for a given repository

m2/settings.xml
<settings>
...
<mirrors>  
  <mirror>  
    <id>UK</id>  
    <name>UK Central</name>  
    <url>http://uk.maven.org/maven2</url>  
    <mirrorOf>central</mirrorOf>                         //intercepts central repo
  </mirror>  
</mirrors> 
...
</settings>


 <repository>  
          <snapshots>  
              <enabled>false</enabled>  
          </snapshots>  
          <id>central</id>  
          <name>Maven Repository Switchboard</name>  
          <url>http://repo1.maven.org/maven2</url>  
</repository>  


---------------
Common Public Maven Repositories:
1)Maven Central
• Established in 2002, considered the ‘grand-daddy’ of Maven repositories
• Default repository used by Apache Maven, sbt, and others.
• Over 3.3M indexed jars
• URL: http://central.maven.org/maven2/ 

2)Sonatype
• Sonatype - Staging Repository used to publish artifacts to Maven Central
• Hosted by company sonatype
• Typically not used directly
• 2M+ Indexed JARs
• URL: https://oss.sonatype.org/content/repositories/releases/

3)JCenter
• Has Maven Central Artifacts and more
• Default for Android Studio and Gradle
• Has support for HTTPS
• Uses different CDN than Maven Central. May be more performant in different countries
• Depends on geo-location of location
• URL: https://jcenter.bintray.com/

4)JBoss
• Artifacts for the JBoss community
• Has repositories for releases, third party releases, and snapshots
• URL: https://repository.jboss.org/nexus/content/repositories/releases/

5)Atlassian
• Hosted by Atlassian (Jira, Confluence, etc)
• Artifacts for Atlassian Plugin Developers
• URL: https://packages.atlassian.com/maven/public
• Snapshot URL: https://packages.atlassian.com/maven/public-snapshot

6)Atlassian
• Hosted by Atlassian (Jira, Confluence, etc)
• Artifacts for Atlassian Plugin Developers
• URL: https://packages.atlassian.com/maven/public
• Snapshot URL: https://packages.atlassian.com/maven/public-snapshot

7)Spring Framework
• Hosted by Pivotal, company supporting the Spring Framework
• Provides Releases, Milestone Releases, and Snapshots
• Helpful for developing against leading edge versions of Spring Framework Components
• Releases are also published to Maven Central
• URL: https://repo.spring.io
---------------------------------

Maven Settings Files:
User Settings - kept in <user home>/.m2/settings.xml
• Can be overridden with command line parameter -s <path / filename>
• Common to override in CI builds

Global Settings - Kept in Maven home /conf/settings.xml
• Applies to all users using Maven from that directory
• Can be overridden with command line parameter -gs <path / filename>
• Rarely used, user settings typically used instead
--------------------
Settings Elements
• localRepository - Allows you to override the location of the local Maven repository
• interactiveMode - Allows you to set interactive / batch mode. Defaults to interactive.
• usePluginRegistry - Maven 2.0, no longer used in Maven 3.0
• offline - defaults to false, if true Maven will not try to connect to remote repositories
• pluginGroups - List plugin group ids, to allow abbreviated plugin goals
• servers - element allows you to set user credentials for servers which Maven connects to
• mirrors - Allows you to configure mirrors for repositories 
• proxies - Define network proxy information
• profiles - Define build profiles
• activeProfiles - define active build profiles
-------------------------------------
Password Encryption:
Maven supports server password encryption. The main use case, addressed by this solution is:

multiple users share the same build machine (server, CI box)
some users have the privilege to deploy Maven artifacts to repositories, some don't.
this applies to any server operations, requiring authorization, not only deployment
settings.xml is shared between users
The implemented solution adds the following capabilities:

authorized users have an additional settings-security.xml file in their ${user.home}/.m2 folder
this file either contains encrypted master password, used to encrypt other passwords
or it can contain a relocation - reference to another file, possibly on removable storage
this password is created first via CLI for now
server entries in the settings.xml have passwords and/or keystore passphrases encrypted
for now - this is done via CLI after master password has been created and stored in appropriate location



How to create a master password:
>mvn --encrypt-master-password <password>

This command will produce an encrypted version of the password, something like:
{jSMOWnoPFgsHVpMvz5VrIt5kRbzGpI8u+9EF1iFQyJQ=}

Store this password in the ${user.home}/.m2/settings-security.xml; it should look like

<settingsSecurity>
  <master>{jSMOWnoPFgsHVpMvz5VrIt5kRbzGpI8u+9EF1iFQyJQ=}</master>
</settingsSecurity>

How to encrypt server passwords:


>mvn --encrypt-password <password>
This command produces an encrypted version of it, something like:
{COQLCE6DU6GtcS5P=}

Copy and paste it into the servers section of your settings.xml file. This will look like:

<settings>
...
  <servers>
...
    <server>
      <id>my.server</id>
      <username>foo</username>
      <password>{COQLCE6DU6GtcS5P=}</password>
    </server>
...
  </servers>
...
</settings>

Please note that password can contain any information outside of the curly brackets, so that the following will still work:

<settings>
...
  <servers>
...
    <server>
      <id>my.server</id>
      <username>foo</username>
      <password>Oleg reset this password on 2009-03-11, expires on 2009-04-11 {COQLCE6DU6GtcS5P=}</password>
    </server>
...
  </servers>
...
</settings>

Then you can use, say, deploy plugin, to write to this server:

>mvn deploy:deploy-file -Durl=https://maven.corp.com/repo \
                       -DrepositoryId=my.server \
                       -Dfile=your-artifact-1.0.jar \
--------------------------------------
As a build, release and deployment engineer, there are multiple types of releases as below:

Alpha
Beta
Snapshot
Release
Nightly
Milestone
Release Candidate(RC)


Alpha:
The alpha phase of the release life cycle is the first phase to begin software testing (alpha is the first letter of the Greek alphabet, used as the number 1). In this phase, developers generally test the software using white-box techniques. Additional validation is then performed using black-box or gray-box techniques, by another testing team. Moving to black-box testing inside the organization is known as alpha release

Alpha software can be unstable and could cause crashes or data loss. Alpha software may not contain all of the features that are planned for the final version. In general, external availability of alpha software is uncommon in proprietary software, while open source software often has publicly available alpha versions. The alpha phase usually ends with a feature freeze, indicating that no more features will be added to the software. At this time, the software is said to be feature complete.

Beta:
"Beta Test" redirects here. For the film, see Beta Test (film). Beta, named after the second letter of the Greek alphabet, is the software development phase following alpha. Software in the beta stage is also known as betaware. Beta phase generally begins when the software is feature complete but likely to contain a number of known or unknown bugs. Software in the beta phase will generally have many more bugs in it than completed software, as well as speed/performance issues and may still cause crashes or data loss. The focus of beta testing is reducing impacts to users, often incorporating usability testing. The process of delivering a beta version to the users is called beta release and this is typically the first time that the software is available outside of the organization that developed it. Beta version software is often useful for demonstrations and previews within an organization and to prospective customers. Some developers refer to this stage as a preview, preview release, prototype, technical preview / technology preview (TP), or early access. Some software is kept in perpetual beta, where new features and functionality are continually added to the software without establishing a firm "final" release.

Beta testers are people who actively report issues of beta software. They are usually customers or representatives of prospective customers of the organization that develops the software. Beta testers tend to volunteer their services free of charge but often receive versions of the product they test, discounts on the release version, or other incentives.

As the Internet has facilitated rapid and inexpensive distribution of software, companies have begun to take a looser approach to use of the word "beta". In February 2005, ZDNet published an article about the recent phenomenon of a beta version often staying for years and being used as if it were in production level, disparagingly called "perpetual beta". It noted that Gmail and Google News, for example, had been in beta for a long period of time and were not expected to drop the beta status despite the fact that they were widely used; however, Google News did leave beta in January 2006, followed by Google Apps, including Gmail, in July 2009. This technique may allow a developer to delay offering full support and responsibility for remaining issues. In the context of Web 2.0, people even talk of perpetual betas to signify that some software is meant to stay in beta state. Also, "beta" is sometimes used to indicate something more like a release candidate, or as a form of time-limited demo, or marketing technique. Since the introduction of Windows 8, Microsoft has no longer been naming their software as a beta. Instead, they have been using the term preview for most pre-release software. Since the launch of the Windows Insider Program back in 2014, all pre-release builds that are released through the program are known as Insider Preview builds.

Snapshot and Release:
A snapshot version in Maven is one that has not been released.

The idea is that before a 1.0 release (or any other release) is done, there exists a 1.0-SNAPSHOT. That version is what might become 1.0. It's basically "1.0 under development". This might be close to a real 1.0 release, or pretty far (right after the 0.9 release, for example).

The difference between a "real" version and a snapshot version is that snapshots might get updates. That means that downloading 1.0-SNAPSHOT today might give a different file than downloading it yesterday or tomorrow.

Usually, snapshot dependencies should only exist during development and no released version (i.e. no non-snapshot) should have a dependency on a snapshot version.

Nightly:
A nightly build is a neutral build that takes place automatically. These typically take place when no one is likely to be working in the office so that there are no changes to the source code during the build.

Nightly builds are a good thing, they provide immediate feedback to developers if they broke the build. Having a nightly build means that the software stable and is likely to build for new users. Software that is not built regularly is difficult to release.

Milestone:
Milestone versions include specific sets of functions and are released as soon as the functionality is complete.

Release Candidate [RC]:
Release candidate. A release candidate (RC), also known as "going silver", is a beta version with potential to be a final product, which is ready to release unless significant bugs emerge.

Release Candidate (RC) is the build released internally to check if any critical problems have gone undetected into the code during the previous development period. Release candidates are NOT for production deployment, but they are for testing purposes only.
