ROLE_ANONYMOUS => all user allowed
ROLE_{Any custom name allowed} like ROLE_FOO
order of intercept-url matters so keep pattern="/**" at the end.

auto-config="true" is equivalent to:
<http>
    <form-login />
    <http-basic />
    <logout />
</http>

==================
<form-login
login-page="/login" #get request which will open form
login-processing-url=""   #post request will will authenticate
username-parameter=""  #name of username field in custom login form
password-parameter=""  #name of password field in custom login form
default-target-url=""  #url to goto after user successful login only if user have not hit any secured resource before login(otherwise goto user selected secure resource)
always-use-default-target="true"  #always send logged in user to default-target-url
authentication-failure-url="/login?error=true"  #now in our view layer we can check if error=true then display "invalid credentials" message

/>



<logout
logout-url="/logout" #url for logging out
logout-success-url="/login?logout=true"
/>

=========================
Security Interceptors:Decides if access is grant to a particular resource
1.FilterSecurityInterceptor: enforce access to HTTP resource. <http> tag in config
2.MethodSecurityInterceptor: enforce access to method invocations.<global-method-security> tag in config
============================================================

Manually login:
public void login(HttpServletRequest req, String user, String pass) { 
    UsernamePasswordAuthenticationToken authReq
      = new UsernamePasswordAuthenticationToken(user, pass);
    Authentication auth = authManager.authenticate(authReq);
     
    SecurityContext sc = SecurityContextHolder.getContext();
    sc.setAuthentication(auth);
    HttpSession session = req.getSession(true);
    session.setAttribute(SPRING_SECURITY_CONTEXT_KEY, sc);
}
=========================================================
basic components:
Authentication: wraps principle(user or system who is authenticating)
UsernamePasswordAuthenticationToken: Implementation of Authentication,holds username ,password and grantedAuthority[].
AuthenticationManager: Its implemantaion  process authentication request and creates Authentication object as shown in above example.
  public Authentication  authenticate(Authentication auth).
this authenticate() method uses UserDetailsService to fetch UserDetails, check if input credentials match that of UserDetails object.

UserDetails: Think of this as an adapter between principal and your user in database. You can cast principal to Userdetails in most of the cases.
UserDetailsService: UserDetails loadUserByUsername(String username) throws UserNotFoundException. It can be InMemoryUserDetailsManager,JdbcUserDetailsManager or otherimplementation.
===========================================================
<filter>
        <filter-name>filterChainProxy</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>
<filter-mapping>
    <filter-name>filterChainProxy</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
<filter-mapping>
    <filter-name>ndcLogFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
=========================================================
custom filterchain:
First, the id of the FilterChainProxy bean is set to filterChainProxy. This id is also the filter name of the Spring’s DelegatingFilterProxy declared previously in the web.xml file. It is the default convention.

<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy"> 
<sec:filter-chain-map path-type="ant"> 
<sec:filter-chain pattern="/webServices/**" filters=" securityContextPersistenceFilterForWebServices, WSAuthenticationFilter, exceptionTranslationFilter, filterSecurityInterceptor" /> 
<sec:filter-chain pattern="/**" filters=" securityContextPersistentFilter, logoutFilter, authenticationProcessingFilter, anonymousFilter, exceptionTranslationFilter, filterSecurityInterceptor" /> 
</sec:filter-chain-map> 
</bean>

Let’s examine the generic filter chain in depth.

    securityContextPersistentFilter: this filter is used to store and retrieve the security context (user credentials, if any) between successive accesses to the application
    logoutFilter: this filter handles the logout. It should be placed at the beginning of the filter chain so a click on the logout link (or button) will not go through the rest of the chain
    authenticationProcessingFilter: this filter handles all the authentication process
    anonymousFilter: this filter handles anonymous login and creates an Authentication object in the HTTP session for later use
    exceptionTranslationFilter: this filter re-direct the user to an error page when Security exception is encountered
    filterSecurityInterceptor: this filter is manaing the access management
================================================================


securityContextPersistentFilter delegates its responsibilities of storing and retrieving to a SecurityContextRepository  implementation.

SecurityContextRepository:  Strategy used for persisting a SecurityContext between requests.
Used by SecurityContextPersistenceFilter to obtain the context which should be used for the current thread of execution and to store the context once it has been 
removed from thread-local storage and the request has completed. 

HttpSessionSecurityContextRepository: A SecurityContextRepository implementation which stores the security context in the HttpSession between requests.
The HttpSession will be queried to retrieve the SecurityContext in the loadContext method (using the key SPRING_SECURITY_CONTEXT_KEY by default). 
If a valid SecurityContext cannot be obtained from the HttpSession for whatever reason, a fresh SecurityContext will be created by calling by 
SecurityContextHolder.createEmptyContext() and this instance will be returned instead.

<!-- Filter to store the Authentication object in the HTTP Session -->   
<bean id="securityContextPersistentFilter"
    class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
    <property name="securityContextRepository" ref="securityContextRepository" />
</bean>
     
     
<bean id="securityContextRepository"
    class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />
==================================================================
The LogoutFilter is in charge of logging out the current user and invalidating the security context. The task of invalidating the HTTP session is again delegated to 
another actor, the SecurityContextLogoutHandler. 

<bean id="logoutFilter"
    class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <constructor-arg value="/pages/Security/logout.html" />
    <constructor-arg>
        <list>
            <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
        </list>
    </constructor-arg>
    <property name="filterProcessesUrl" value="/j_myApplication_logout"/>
</bean>

=================================================================================
Remember me:
1.token based
This allows to login even after session is expired.s
hash based token formula: base64(username+':'+expirationDate+':'+md5Hex(username+':'+expirationDate+':'+'password'+':'+key))
this token is retained in remember-me cookie of browser.

configuration:
http..and().rememberMe().key('myKey').tokenValiditySeconds(10000)

2.persistent
persistent_logins table is created with 4 columns(username varchar,series varchar(pk),token varchar,last_used timestamp)


configuration:
http..and().rememberMe().key('myKey').tokenRepository(persistantTokenRepo()).tokenValiditySeconds(10000)

@Bean
PersistentTokenRepository persistantTokenRepo(){
JdbcTokenRepositoryImpl db=new JdbcTokenRepositoryImpl();
db.setDataSource(datasource);
return db; 
}

==================================================================================================
example:

        <http auto-config="true" use-expressions="true"  create-session="ifRequired">

		<intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" requires-channel="https" />
                 <intercept-url pattern="/login*" access="permitAll"/>
                 <intercept-url pattern="/**" access="isAuthenticated()"/>
                <access-denied-handler error-page="/403" />
		<form-login 
		        login-page="/login" 
		        default-target-url="/welcome" 
			authentication-failure-url="/login?error" 
			username-parameter="username"
			password-parameter="password" />
		<logout logout-success-url="/login?logout" delete-cookies="JSESSIONID" />
		<!-- enable csrf protection -->
		<csrf/>
                <remember-me 
                 token-validity-seconds="1209600"
	         remember-me-parameter="remember-me" 
	         data-source-ref="dataSource" />
    <session-management invalid-session-url="/invalidSession.html"  session-fixation-protection="migrateSession">
        <concurrency-control max-sessions="2" expired-url="/sessionExpired.html" />
    </session-management>

   <http-basic />
   <custom-filter ref="digestFilter" after="BASIC_AUTH_FILTER" />
	</http>
	


<beans:bean id="digestFilter" class=
 "org.springframework.security.web.authentication.www.DigestAuthenticationFilter">
   <beans:property name="userDetailsService" ref="userService" />
   <beans:property name="authenticationEntryPoint" ref="digestEntryPoint" />
</beans:bean>
 
<beans:bean id="digestEntryPoint" class=
 "org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint">
   <beans:property name="realmName" value="Contacts Realm via Digest Authentication"/>
   <beans:property name="key" value="acegi" />
</beans:bean>


Central to Digest Authentication is a "nonce". This is a value the server generates. Spring Security’s
nonce adopts the following format:
base64(expirationTime + ":" + md5Hex(expirationTime + ":" + key))
expirationTime: The date and time when the nonce expires, expressed in milliseconds
key: A private key to prevent modification of the nonce token
The DigestAuthenticatonEntryPoint has a property specifying the key used for generating the
nonce tokens, along with a nonceValiditySeconds property for determining the expiration time
(default 300, which equals five minutes).

Realm=>set of secured resources.if a username+password combination allows access to a realm resource,it should be possible to access all other resources in that realm with same credentials.

==================================================================================================
<authentication-manager>
	  <authentication-provider>
             
	    <user-service>
		<user name="mkyong" password="123456" authorities="ROLE_USER" />
	    </user-service>
	  </authentication-provider>
	</authentication-manager>
=========================================================================================

	<authentication-manager>
	  <authentication-provider>
                <password-encoder ref="encoder" />
		<jdbc-user-service data-source-ref="dataSource"
		  users-by-username-query=
		    "select username,password, enabled from users where username=?"
		  authorities-by-username-query=
		    "select username, role from user_roles where username =?  " />
	  </authentication-provider>
	</authentication-manager>



 <beans:bean id="encoder" 
	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	<beans:constructor-arg name="strength" value="11" />
  </beans:bean>
=========================================================================================
	<authentication-manager>
		<authentication-provider user-service-ref="myUserDetailsService" >
			<password-encoder hash="bcrypt" />    
		</authentication-provider>
	</authentication-manager>

public class MyUserDetailsService implements UserDetailsService {

	private UserDao userDao;

	@Override
	public UserDetails loadUserByUsername(final String username) 
               throws UsernameNotFoundException {

		com.mkyong.users.model.User user = userDao.findByUserName(username);
		List<GrantedAuthority> authorities = buildUserAuthority(user.getUserRole());

		return buildUserForAuthentication(user, authorities);
		

	}

	// Converts com.mkyong.users.model.User user to
	// org.springframework.security.core.userdetails.User
	private User buildUserForAuthentication(com.mkyong.users.model.User user, 
		List<GrantedAuthority> authorities) {
		return new User(user.getUsername(), 
			user.getPassword(), user.isEnabled(), 
                        true, true, true, authorities);
	}

	private List<GrantedAuthority> buildUserAuthority(Set<UserRole> userRoles) {

		Set<GrantedAuthority> setAuths = new HashSet<GrantedAuthority>();

		// Build user's authorities
		for (UserRole userRole : userRoles) {
			setAuths.add(new SimpleGrantedAuthority(userRole.getRole()));
		}

		List<GrantedAuthority> Result = new ArrayList<GrantedAuthority>(setAuths);

		return Result;
	}
}
=============================================================================================
   <authentication-manager>
        <authentication-provider
          ref="customAuthenticationProvider" />
    </authentication-manager>

@Component
public class CustomAuthenticationProvider
  implements AuthenticationProvider {
 
    @Override
    public Authentication authenticate(Authentication authentication) 
      throws AuthenticationException {
  
        String name = authentication.getName();
        String password = authentication.getCredentials().toString();
         
        if (shouldAuthenticateAgainstThirdPartySystem()) {
  
            // use the credentials
            // and authenticate against the third-party system
            return new UsernamePasswordAuthenticationToken(
              name, password, new ArrayList<>());
        } else {
            return null;
        }
    }
 
    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.equals(
          UsernamePasswordAuthenticationToken.class);
    }
}

OR
@Configuration
@EnableWebSecurity
@ComponentScan("org.baeldung.security")
public class SecurityConfig extends WebSecurityConfigurerAdapter {
  
    @Autowired
    private CustomAuthenticationProvider authProvider;
 
    @Override
    protected void configure(
      AuthenticationManagerBuilder auth) throws Exception {
  
        auth.authenticationProvider(authProvider);
    }
 
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().anyRequest().authenticated()
            .and()
            .httpBasic();
    }
}
======================================================================================
<global-method-security pre-post-annotations="enabled" jsr250-annotations="enabled"/>
@PreAuthorize("hasRole('ROLE_USER')")
@RolesAllowed('ROLE_USER')
=======================================================================================
JWT:
syntax:    <header>.<payload>.<signature>

header: It is base64encoded

{
"alg":"HS256",   //hashing algorith to use
"typ":"JWT"
}

payload(claims): It is base64encoded

{
"name":"John Doe",
"admin":true
}

secret:
HS256(base64Encode(header).base64Encode(payload).secret)


New no one will be able to tamper the payload unless they know the secret.
But still if anyone steals jwt token then he can access all the resources authorized for that particular user.
First user can authenticate himself with username and password.then server can return jwt token(no need to store claims on session).JWT token should be sent by client in the request(Authorization header) to access protected resources.

==========================
Oauth entities: 
1.user/Resource owner
2.app/client( app may require access to user's FB basic profile details)
3.api server(Resource server + authorization server) eg google,facebook,bank

Oauth flow for Authorization code grant:
1. users make a request on app
2.app will make an authorization request to authorization server
3.auth server will return a grant permission dialog where user can grant permissions to app.
4.If user provides permission ,an authorization grant(along with authorization code)  is send from auth server to app. This authorization code is required by app to request  access token to view users basic profile details.
5.app will request  for access token to auth server by making Authorigation grant request(which holds authorication code)
6.Now app can request a resource from resource server(along with access token).If valid token is provided then protected resource is returned.

Prerequisites:
app must  register its app  on api server with details like:
1.name
2.website
3.callback url: The app url authorization server  will redirect to after user grants certain permission to app

api server generates the following for app:
1.client id=> public and unique identifier for app
2.client secret=>used to authenticate app when it makes request for access token(like password for app)

Grant types:
1.Authorization code grant(login using fb or google)
2.Implicit grant
3.password grant(resource owners credentials grant)
4.client credentials grant
5.Refresh token grant


 

