
get request details:
>Invoke-WebRequest -Uri 'https://techsnips.io' -Method GET



return response:
>$result=(Invoke-WebRequest -Uri 'https://techsnips.io' -Method GET).content


#returns all links which has class=‘ng-binding’ attribute:
>(Invoke-WebRequest -Uri 'https://techsnips.io' -Method GET).links | where {$_.class -eq ‘ng-binding’}


#? is like foreach operation in functional programming: 
(Invoke-WebRequest -Uri 'https://techsnips.io' -Method GET).links | ?  {$_.class}



$r = Invoke-WebRequest http://httpbin.org/json

$r.StatusCode
200

$r.Headers

----------------------
Setting request headers:

syntax:
-Headers   @{ <name> = <value>; [<name> = <value> ] ...}

>$r = iwr http://httpbin.org/headers `
-Headers @{'Accept' = 'application/json'; 'X-My-Header' = 'Hello World'}


 Default request content type is set to application/x-www-form-urlencoded



$r = Get-Content test.txt -ReadCount 0 | `
iwr http://httpbin.org/post `
    -Method 'POST' `
    -Headers @{'Content-Type' = 'application/json; charset=utf-8'}
	
	
$r = Get-Content test.txt -ReadCount 0 | `
iwr http://httpbin.org/post `
-Method 'POST' `
-ContentType 'application/json; charset=utf-8'	


iwr http://httpbin.org/post `
-Method 'POST' `
-ContentType 'application/json; charset=utf-8' `
-Body '{"hello": "world"}'



try {
    $r = iwr http://httpbin.org/doesnt-exist
} catch {
    $r = $_.Exception
}