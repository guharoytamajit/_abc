istioctl:
Istio configuration command line utility for service operators to debug and diagnose their Istio mesh.


download istioctl from https://istio.io/latest/docs/setup/getting-started/#download

>curl -L https://istio.io/downloadIstio | sh -
>cd istio-1.7.1
>export PATH=$PWD/bin:$PATH


Install Istio:
>istioctl install --set profile=demo
>kubectl label namespace default istio-injection=enabled

install default istio profile,in our cluster:
>istioctl manifest apply  

List available profiles
>istioctl profile list
Istio configuration profiles:
    demo
    empty
    minimal
    preview
    remote
    default
	
use a specific profile in cluster:
>istioctl manifest apply --set profile=demo  # Use a profile from the list
>kubectl get po -n istio-system   #verify
again we can apply default profile:
>istioctl manifest apply    
>kubectl get po -n istio-system   #verify

The diff subcommand compares manifests from two files or directories.
>istioctl manifest diff <file|dir> <file|dir> 


generates an Istio install manifest and outputs to the console by default.
Generate a default Istio installation
>istioctl manifest generate   #by default,  default profile will be generated

generate manifest  of default profile with  grafana dashboard enabled:
>istioctl manifest generate --set values.grafana.enabled=true   --set profile=default
Note: we can see other values which can be applied to --set inside IstioOperator defination of "istioctl  profile dump"

For production this configuratin iis better than demo profile:
>istioctl manifest generate --set values.grafana.enabled=true  --set values.kiali.enabled=true  --set values.tracing.enabled=true  --set components.egressGateways.enabled=true  --set profile=default


istio profiles:
The profiles provide customization of the Istio control plane and of the sidecars for the Istio data plane.
You can start with one of Istio’s built-in configuration profiles and then further customize the configuration for your specific needs. 
 The following built-in configuration profiles are currently available:

1.default(istio-ingressgateway,istiod):
display the default setting by running the command "istioctl profile dump".

2.demo(istio-ingressgateway,istiod,istio-egressgateway):
This profile enables high levels of tracing and access logging so it is not suitable for performance tests.

3.minimal(istiod):
the minimal set of components necessary to use Istio’s traffic management features.

4.remote:
used for configuring remote clusters of a multicluster mesh.

5.empty: 
deploys nothing. This can be useful as a base profile for custom configuration.

6.preview: 
the preview profile contains features that are experimental. This is intended to explore new features coming to Istio. 

Note:
note that demo profile is not for production as  here istiod has lesser resource regrest and 100% sampling rate for tracing, which is not good for performance.
So best solution is creating our custom profile(taking default profile dump ,make necessary changes ,and apply changes in k8s cluster) 


View manifest files of a profile (say demo):
>istioctl profile dump demo

we can  redirect the yaml in a file:
>istioctl profile dump demo >demo.yaml

We cannot apply this yaml directly in k8s cluster with "kubectl apply -f  ./demo.yaml" because the CRD of the resources defined in this file in not known by k8s
The solution of this problem is we can apply this file using istioctl manifest apply command:
>istioctl manifest apply -f ./demo.yaml

Alternatively we can generate manifest file with standard k8s objects:
>istioctl manifest generate -f ./demo.yaml  > demo_k8s.yaml
>kubectl apply -f demo_k8s.yaml     #now we can deploy istio using  kubectl,now no more dependency on istioctl,we can deploy this in any k8s cluster (even if  istioctl is not installed.)

see diff between two profiles:
>istioctl profile diff demo default



deploy app:
>kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.7/samples/bookinfo/platform/kube/bookinfo.yaml
>kubectl get services
>kubectl get pods
>kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -s productpage:9080/productpage | grep -o "<title>.*</title>"


Open the application to outside traffic:
>kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.7/samples/bookinfo/networking/bookinfo-gateway.yaml
>istioctl analyze   #Ensure that there are no issues with the configuration


Determining the ingress IP and ports:
>kubectl get svc istio-ingressgateway -n istio-system

>export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
>export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
>export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

In certain environments, the load balancer may be exposed using a host name, instead of an IP address.
>export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

if your environment does not have an external load balancer and choose a node port instead:
>export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
>export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')


Set GATEWAY_URL:
>export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT


Verify external access:
>echo http://"$GATEWAY_URL/productpage"


Install Kiali and wait for it to be deployed:
>kubectl apply -f samples/addons
>while ! kubectl wait --for=condition=available --timeout=600s deployment/kiali -n istio-system; do sleep 1; done
>istioctl dashboard kiali




https://istio.io/latest/docs/examples/bookinfo


very important links:
https://medium.com/faun/understanding-how-envoy-sidecar-intercept-and-route-traffic-in-istio-service-mesh-20fea2a78833
https://zhaohuabing.com/post/2018-09-25-istio-traffic-management-impl-intro/
