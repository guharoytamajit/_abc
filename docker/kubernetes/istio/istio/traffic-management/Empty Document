kubectl get all

kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/platform/kube/bookinfo.yaml

kubectl get all

kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/bookinfo-gateway.yaml

kubectl get virtualservices
kubectl get gateway


kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/destination-rule-all.yaml

kubectl get destinationrules


kubectl get services

export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')


export INGRESS_HOST=$(minikube ip)

export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

echo $GATEWAY_URL

curl -s "http://${GATEWAY_URL}/productpage" | grep -o "<title>.*</title>"
==============================================
Network Traffic Shifting:


for i in `seq 1 100`; do curl -s -o /dev/null http://$GATEWAY_URL/productpage; done


All route to version 1:
kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/virtual-service-all-v1.yaml

for i in `seq 1 100`; do curl -s -o /dev/null http://$GATEWAY_URL/productpage; done


kubectl get services


kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml
https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml


kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-v3.yaml
https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/virtual-service-reviews-v3.yaml

kubectl delete -f samples/bookinfo/networking/virtual-service-all-v1.yaml
https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/virtual-service-all-v1.yaml


kubectl get virtualservices
kubectl describe virtualservice ratings
kubectl delete virtualservice ratings
kubectl delete virtualservice reviews
kubectl delete virtualservice details
kubectl delete virtualservice productpage


===============================================
Network Virtual Service:

Dark release:
kubectl get virtualservices

kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml

User: jason

kubectl delete virtualservice reviews


Request timeout Fault:


kubectl get all --all-namespaces



kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/platform/kube/bookinfo.yaml



kubectl apply -f samples/bookinfo/networking/destination-rule-all.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/destination-rule-all.yaml


kubectl get destinationrules



kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml

https://raw.githubusercontent.com/istio/istio/release-1.6/samples/bookinfo/networking/bookinfo-gateway.yaml

kubectl get virtualservices
kubectl get gateway


kubectl get services

export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')


export INGRESS_HOST=$(minikube ip)

export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

echo $GATEWAY_URL



kubectl -n istio-system get service istio-ingressgateway



https://github.com/istio/istio/blob/release-1.6/samples/bookinfo/src/reviews/reviews-application/src/main/java/application/rest/LibertyRestEndpoint.java

https://github.com/istio/istio/blob/release-1.6/samples/bookinfo/src/productpage/productpage.py

kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml


kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
    - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
EOF



kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: ratings
spec:
  hosts:
  - ratings
  http:
  - fault:
      delay:
        percent: 100
        fixedDelay: 2s
    route:
    - destination:
        host: ratings
        subset: v1
EOF


kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: reviews
spec:
  hosts:
  - reviews
  http:
  - route:
    - destination:
        host: reviews
        subset: v2
    timeout: 0.5s
EOF


kubectl delete -f samples/bookinfo/networking/virtual-service-all-v1.yaml

====================================
 Fault Injection:

kubectl apply -f samples/bookinfo/networking/virtual-service-all-v1.yaml
kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml

export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')


export INGRESS_HOST=$(minikube ip)

export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

echo $GATEWAY_URL


kubectl apply -f samples/bookinfo/networking/virtual-service-ratings-test-delay.yaml

kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-v3.yaml



kubectl apply -f samples/bookinfo/networking/virtual-service-ratings-test-abort.yaml

kubectl delete -f samples/bookinfo/networking/virtual-service-all-v1.yaml

samples/bookinfo/platform/kube/cleanup.sh


===============================================

TCP Traffic Shifting:

kubectl get namespaces --show-labels

kubectl create namespace istio-io-tcp-traffic-shifting
kubectl label namespace istio-io-tcp-traffic-shifting istio-injection=enabled

kubectl get namespaces --show-labels


kubectl apply -f samples/sleep/sleep.yaml -n istio-io-tcp-traffic-shifting




kubectl apply -f samples/tcp-echo/tcp-echo-services.yaml -n istio-io-tcp-traffic-shifting

https://github.com/venilnoronha/tcp-echo-server


~~~~~~~~~~~~~~~~~~~~~~~~~~

export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')


export INGRESS_HOST=$(minikube ip)

echo $TCP_INGRESS_PORT


~~~~~~~~~~~~~~~~~~~~~~~~~~


kubectl apply -f samples/tcp-echo/tcp-echo-all-v1.yaml -n istio-io-tcp-traffic-shifting

kubectl get pod -l app=sleep -n istio-io-tcp-traffic-shifting -o jsonpath={.items..metadata.name}


kubectl -n istio-system get service istio-ingressgateway

nc $INGRESS_HOST $TCP_INGRESS_PORT

kubectl exec sleep-8f795f47d-pq2dm -c sleep -n istio-io-tcp-traffic-shifting -- sh -c "(date;) | nc $INGRESS_HOST $TCP_INGRESS_PORT"


for i in {1..20}; do \
kubectl exec "$(kubectl get pod -l app=sleep -n istio-io-tcp-traffic-shifting -o jsonpath={.items..metadata.name})" \
-c sleep -n istio-io-tcp-traffic-shifting -- sh -c "(date; sleep 1) | nc $INGRESS_HOST $TCP_INGRESS_PORT"; \
done



kubectl apply -f samples/tcp-echo/tcp-echo-20-v2.yaml -n istio-io-tcp-traffic-shifting

kubectl get virtualservice tcp-echo -o yaml -n istio-io-tcp-traffic-shifting

for i in {1..20}; do \
kubectl exec "$(kubectl get pod -l app=sleep -n istio-io-tcp-traffic-shifting -o jsonpath={.items..metadata.name})" \
-c sleep -n istio-io-tcp-traffic-shifting -- sh -c "(date; sleep 1) | nc $INGRESS_HOST $TCP_INGRESS_PORT"; \
done


kubectl delete -f samples/tcp-echo/tcp-echo-all-v1.yaml -n istio-io-tcp-traffic-shifting
kubectl delete -f samples/tcp-echo/tcp-echo-services.yaml -n istio-io-tcp-traffic-shifting
kubectl delete -f samples/sleep/sleep.yaml -n istio-io-tcp-traffic-shifting
kubectl delete namespace istio-io-tcp-traffic-shifting
=================================================

httpbin sample Pod:

http://httpbin.org/

kubectl apply -f samples/httpbin/httpbin.yaml

kubectl get all

export SLEEP_POD=$(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name})
kubectl exec -it $SLEEP_POD -c sleep -- curl http://httpbin:8000/ip
kubectl exec -it $SLEEP_POD -c sleep -- curl http://httpbin:8000/anything
kubectl exec -it $SLEEP_POD -c sleep -- curl http://httpbin:8000/headers
kubectl exec -it $SLEEP_POD -c sleep -- curl http://httpbin:8000/user-agent


kubectl delete -f samples/httpbin/httpbin.yaml
kubectl delete -f samples/sleep/sleep.yaml


Fortio sample Pod:

https://fortio.org/
https://github.com/fortio/fortio/#fortio

http://localhost:8080/fortio/

kubectl apply -f samples/httpbin/sample-client/fortio-deploy.yaml

kubectl get all

FORTIO_POD=$(kubectl get pods -lapp=fortio -o 'jsonpath={.items[0].metadata.name}')

echo $FORTIO_POD

kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -curl http://httpbin:8000/get


kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -c 2 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get

kubectl delete -f samples/httpbin/sample-client/fortio-deploy.yaml



Circuit Breaker Demo:


kubectl apply -f samples/httpbin/httpbin.yaml

https://istio.io/latest/docs/reference/config/networking/destination-rule/


kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: httpbin
spec:
  host: httpbin
  trafficPolicy:
    connectionPool:
      tcp:
        maxConnections: 1
      http:
        http1MaxPendingRequests: 1
        maxRequestsPerConnection: 1
    outlierDetection:
      consecutiveErrors: 1
      interval: 1s
      baseEjectionTime: 3m
      maxEjectionPercent: 100
EOF


kubectl apply -f samples/httpbin/sample-client/fortio-deploy.yaml

FORTIO_POD=$(kubectl get pods -lapp=fortio -o 'jsonpath={.items[0].metadata.name}')
kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -curl http://httpbin:8000/get

kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -c 1 -qps 1 -n 20 -loglevel Warning http://httpbin:8000/get

kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -c 1 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get


kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -c 2 -qps 0 -n 20 -loglevel Warning http://httpbin:8000/get


kubectl exec -it "$FORTIO_POD"  -c fortio -- /usr/bin/fortio load -c 3 -qps 0 -n 30 -loglevel Warning http://httpbin:8000/get


kubectl exec "$FORTIO_POD" -c istio-proxy -- pilot-agent request GET stats | grep httpbin | grep pending



kubectl delete destinationrule httpbin


kubectl delete -f samples/httpbin/httpbin.yaml

kubectl delete -f samples/httpbin/sample-client/fortio-deploy.yaml

==============================================================






