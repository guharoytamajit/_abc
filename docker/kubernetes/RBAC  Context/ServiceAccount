
source :https://medium.com/better-programming/k8s-tips-using-a-serviceaccount-801c433d0023


A ServiceAccount is used by containers running in a Pod, to communicate with the API server of the Kubernetes cluster. 
To authenticate against the API server, a Pod uses the token of the attached ServiceAccount. This token is available in the filesystem of each container of the Pod.

All requests to k8s cluster through kubectl or Rest API goes to API Server(in master) 

Accessing the API Server From a Pod:
A lot of applications that run in the cluster (read: running in Pods), need to communicate with the API server. 
For example, some applications might need to know:
The status of the cluster’s nodes.The namespaces available.The Pods running in the cluster, or in a specific namespace.etc.

To communicate with the API server, a Pod uses a ServiceAccount containing an authentication token. 
Roles (e.g: the right to list all the Pods within a given namespace), or ClusterRole (eg: the right to read all the Secrets within the entire cluster), can then be bound to this ServiceAccount.


Using the Namespace Default ServiceAccount:
Each namespace has a default ServiceAccount, named default. We can verify this with the following command:
>kubectl get sa --all-namespaces | grep default

Let’s inspect the ServiceAccount named default of the default namespace:
>kubectl get sa default -o yaml
apiVersion: v1
kind: ServiceAccount
metadata:
 name: default
 namespace: default
 ...
secrets:
- name: default-token-dffkj


We can see here that a Secret is provided to this ServiceAccount. Let’s have a closer look at this one:
>kubectl get secret default-token-dffkj -o yaml
apiVersion: v1
data:
 ca.crt: LS0tLS1CRU...0tLS0tCg==
 namespace: ZGVmYXVsdA==
 token: ZXlKaGJHY2...RGMUlIX2c=
kind: Secret
metadata:
 name: default-token-dffkj
 namespace: default
 ...
type: kubernetes.io/service-account-token

There are several key/value pairs under the data key of this Secret.
1)ca.crt is the Base64 encoding of the cluster certificate.
2)namespace is the Base64 encoding of the current namespace (default).
3)token is the Base64 encoding of the JWT used to authenticate against the API server.


we can see the payload of the token in  jwt.io:
{
 “iss”: “kubernetes/serviceaccount”,
 “kubernetes.io/serviceaccount/namespace”: “default”,
 “kubernetes.io/serviceaccount/secret.name”: “default-token-dffkj”,
 “kubernetes.io/serviceaccount/service-account.name”: “default”,
 “kubernetes.io/serviceaccount/service-account.uid”: “ac5aa972–80ae-11e9–854d-0800278b691f”,
 “sub”: “system:serviceaccount:default:default”
}

We will see below how to use this token from within a simple Pod, based on the following specification:
apiVersion: v1
kind: Pod
metadata:
 name: pod-default
spec:
 containers:
 - name: alpine
 image: alpine:3.9
 command:
 - "sleep"
 - "10000"

>kubectl apply -f pod-default.yaml

>kubectl get po/pod-default -o yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-default
  namespace: default
  ...
spec:
  serviceAccountName: default
  containers:
  - image: alpine:3.9
    command:
    - sleep
    - "10000"
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-dffkj
  volumes:
  - name: default-token-dffkj
    secret:
      secretName: default-token-dffkj

As no serviceAccountName key is specified, the default ServiceAccount of the Pod’s namespace is used. 
The information of the ServiceAccount is mounted inside the container of the Pod, through the usage of volume, in /var/run/secrets/kubernetes.io/serviceaccount

-----------------------------------

Anonymous call of the API server:
>kubectl exec -ti pod-default -- sh
>curl https://kubernetes/api/v1 --insecure
Output :  “Forbidden”

Let’s go one step further and try to issue the same query using the token of the default ServiceAccount.

Call using the ServiceAccount token:
>TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
>curl -H “Authorization: Bearer $TOKEN” https://kubernetes/api/v1/ --insecure
It works!!

Lets try something which is not authorized eg.use this token to list all the Pods within the default namespace:
>curl -H “Authorization: Bearer $TOKEN” https://kubernetes/api/v1/namespaces/default/pods/ --insecure
Output :  “Forbidden”

The default ServiceAccount does not have enough rights to perform this query. In the following part, we will create our own ServiceAccount and provide it with the additional rights it needs for this action.

=============================================

Creation of a ServiceAccount:

apiVersion: v1
kind: ServiceAccount
metadata:
 name: demo-sa

Create a Role:

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
 name: list-pods
 namespace: default
rules:
 — apiGroups:
   — ''
 resources:
   — pods
 verbs:
   — list

Binding the Role with the ServiceAccount:

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
 name: list-pods_demo-sa
 namespace: default
roleRef:
 kind: Role
 name: list-pods
 apiGroup: rbac.authorization.k8s.io
subjects:
 — kind: ServiceAccount
   name: demo-sa
   namespace: default

Using the ServiceAccount within a Pod:

apiVersion: v1
kind: Pod
metadata:
 name: pod-demo-sa
spec:
 serviceAccountName: demo-sa
 containers:
 — name: alpine
   image: alpine:3.9
   command:
   — "sleep"
   — "10000"

Get the ServiceAccount token from within the Pod's container
>TOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
Call an API Server's endpoint (using the ClusterIP kubernetes service) to get all the Pods running in the default namespace
>curl -H “Authorization: Bearer $TOKEN” https://kubernetes/api/v1/namespaces/default/pods/ --insecure

It works!.


