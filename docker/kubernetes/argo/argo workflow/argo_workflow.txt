kubectl create namespace argo
kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml

> kubectl get po -n argo
NAME                                   READY   STATUS    RESTARTS   AGE
argo-server-6cbd8786cb-c5hjc           1/1     Running   9          30h
minio                                  1/1     Running   1          30h
postgres-677759d5d-4lk9h               1/1     Running   1          30h
workflow-controller-858d99b654-w8xbk   1/1     Running   9          30h

kubectl logs  argo-server-6cbd8786cb-c5hjc -n argo
kubectl logs  workflow-controller-858d99b654-w8xb -n argo
------------------
install argo cli:
# Download the binary
curl -sLO https://github.com/argoproj/argo/releases/download/v2.11.1/argo-linux-amd64.gz

# Unzip
gunzip argo-linux-amd64.gz

# Make binary executable
chmod +x argo-linux-amd64

# Move binary to path
mv ./argo-linux-amd64 /usr/local/bin/argo

# Test installation
argo version



>argo submit -n argo --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml
>argo list -n argo
>argo get -n argo @latest
>argo logs -n argo @latest


NOTE:
Argo CD only listens to apps created in it's own namespace
so in above example if we dont provide "-n argo " in argo submit  command,then the workflow will be in pending state forever

To run workflow from  namespaces other than other we have to add instanceID in  workflow-controller-configmap ,and refer that instanceID while submitting argo workflow ,so that this workflow is picked by desired workflow-controller

>kubectl edit cm workflow-controller-configmap -n argo

data:
  instanceID: |
    "1234"
	
verify if config-map set properly:
>kubectl describe cm workflow-controller-configmap  -n argo    

Then   submit workflow in default namespace with --instanceid "1234":
>argo submit --instanceid "1234" --watch https://raw.githubusercontent.com/argoproj/argo/master/examples/hello-world.yaml  

OR alternatively we can diredt define instanceID in yaml :

 apiVersion: argoproj.io/v1alpha1
  kind: Workflow
  metadata:
    creationTimestamp: "2020-10-01T05:03:16Z"
    generateName: hello-world-
    generation: 5
    labels:
      workflows.argoproj.io/archive-strategy: "false"
      workflows.argoproj.io/completed: "true"
      workflows.argoproj.io/controller-instanceid: "1234"


Even though we are submitting workflow in default namespace(not argo ns) but above workflow will run successfully as we are explicitly telling to run it on workflow controller with instanceid ="1234"
------------
Programming language clients:

https://github.com/argoproj-labs/argo-client-gen
  
---------------------
Hello world workflow:

docker run docker/whalesay cowsay "hello world"

----hello-world.yaml----
apiVersion: argoproj.io/v1alpha1
kind: Workflow                  # new type of k8s spec
metadata:
  generateName: hello-world-    # name of the workflow spec
spec:
  entrypoint: whalesay          # invoke the whalesay template
  templates:
  - name: whalesay              # name of the template
    container:
      image: docker/whalesay
      command: [cowsay]
      args: ["hello world"]
      resources:                # limit the resources
        limits:
          memory: 32Mi
          cpu: 100m


submit a workflow spec to Kubernetes:
argo submit hello-world.yaml    # submit a workflow spec to Kubernetes
OR
kubectl create -f hello-world.yaml

Note:You can also run workflow specs directly using kubectl but the Argo CLI provides syntax checking, nicer output, and requires less typing.


argo submit hello-world.yaml    # submit a workflow spec to Kubernetes
argo list                       # list current workflows
argo get hello-world-xxx        # get info about a specific workflow
argo logs -w hello-world-xxx    # get logs from all steps in a workflow
argo logs hello-world-xxx-yyy   # get logs from a specific step in a workflow
argo delete hello-world-xxx     # delete workflow

kubectl create -f hello-world.yaml
kubectl get wf
kubectl get wf hello-world-xxx
kubectl get po --selector=workflows.argoproj.io/workflow=hello-world-xxx --show-all  # similar to argo
kubectl logs hello-world-xxx-yyy -c main
kubectl delete wf hello-world-xxx

list current workflows:
>argo list   -n argo 
OR
>kubectl get wf

get info about a specific workflow:
>argo -n argo get hello-world-xxx  [-o wide ][-o yaml]
OR
>kubectl get wf hello-world-xxx  

delete workflow:
>argo delete hello-world-xxx  
OR
>kubectl delete wf hello-world-xxx
=======================
Workflow runs in workflow-controller
each templates run on a separate pod


