Keeping image small:
build time
transfer time
attack surface



Use java 11:
it is designed keeping containers in mind, it is also a long term support version(previous to this java 8 was LTS, java 17 will be next LTS version)
different patch of java 8 can give significantly different performance



Images:
Openjdk => 
has debian and alpine flavours
openjdk:11-jre-buster=>
   based on debian image,285Mb
openjdk:11-jre-slim=>
   based on debian slim image ,204Mb   
openjdk:8-jre-alpine=>
   its java 8 image based on alpine linux, 84Mb(where alpine is just about 5 Mb  +  and around 80 Mb of jre)
   unfortunately jdk 11 is not enough tested on alpine   




AdoptOpenJdk =>
has ubuntu and alpine flavours

adoptopenjdk/openjdk11:alpine-jre=> 
   from adoptopenjdk project ,148 Mb
   it is bigger than 8-jre-alpine as it contains a compatibility layer for glibc 
================================
JDK  vs  JRE images:

JRE:
11-jre-slim  ~ 200 Mib


JDK:
11-jdk-slim    ~402 Mib  (it has javac , jlink,jdeps and many more additional utils)


Jdk features which are nice to have in production:
jcmd=> allows us to inspect memory and GC details
jstat=>provide JVM performance-related statistics like garbage collection, compilation activities.
================================
Multi stage build:
image used for build actually has many more tools than that is required to run.








==================================

Graceful shutdown process:

stop accepting new requests
will wait for some time to process already accepted requests(before force shutdown)
stop container
stop embedded server

For spring boot For Spring Boot >= 2.3:

When graceful shutdown is enabled, application will perform following steps sequentially upon shutdown:

To enable graceful shutdown, add "server.shutdown=graceful" to properties (by default it is set to immediate).
Grace period can be configured using "spring.lifecycle.timeout-per-shutdown-phase"" property (example: spring.lifecycle.timeout-per-shutdown-phase=1m.


For Spring Boot < 2.3:
https://github.com/spring-projects/spring-boot/issues/4657

Test Graceful termination process:

create an enpoint with Thread.sleep(30000l)
and add below property:
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=1m 

1)start spring boot app
2)get PID :    > sudo netstat -nltp|grep 8080
3)make a request   >curl  localhost:8080        //this request will not immediately terminate and wait for graceful shutdown
4)stop spring boot with -2(ie CTRL+C,sigint) or -15(sigterm) flag    >kill -15 <pid>                        //note   "kill -9  <pid>"  is used for immediate shutdown.
5)make a request   >curl  localhost:8080      //spring will no longer accept this request  


===================
use ephemeral container + jattach for java application debugging