Redhat's opensource PAAS solution build on the top of docker and kubernetes(with added developer and operations centric tools
that enable RAD,deployment and lifecycle management)

OS= docker + kubernetes + addon Tools

Addon Tools like:
SCM=> iintegration with different source code manager like github
Pipeline=>CI/CD for example images created from SCM changes and pushed in Openshift Container Registry(docker registry) 
Registry=>provide its own docker registry (Openshift Container Registry (OCR))
Software defined  network=>provide different networking capabilities
API centric
Governance=>create users,authentication,authorization,manage different project  and applications.

paas=>once deployed openshift takes care of managing the underlying infrastructure.So developers have to only focus on business logic.
openshift has 4 different flavours:
1.Openshift Origin=>Opensource Openshift's core component(used in all other components)
2.OpenShift Online=>Redhats web hosted version of Openshift origin 
3.Openshift dedicated=>Openshift on managed private cluster on AWS/GCP etc
4.Openshift Enterprise=>On-premise private PAAS

Different options to setup OpenShift(OS):
1.All-in-one=>master and nodes(worker) all together.Only good for development and testing. Example Minishift.
2.Single master and Multi Nodes(workers)=>
3.Milti Master and Multi Nodes(workers)=>HA version.Best for production.


origin is now called OKD(openshift kubernetes distribution)
Openshift installation options:
1.Redhat Openshift(licenced version of openshift):
a)on-premise cluster
b)private or public cloud
2.OKD(openshift kubernetes distribution ,community edition)
a)minishift
b)OKD in a container( oc cluster up)
c)OKD in private or public cloud
d)OKD on premise 

On on-premise setup it can be installed as linux RPM package or inside Docker Container.

------------------
Minishift:
Minishift bundles OpenShift origin+etcd+kubernetes all together into a single image(iso),providing pre-configured single node OS cluster.
Openshift provides an executable cli Minishift.exe which can automatically downloads minishift image for us,and also deploy them on any virtualization platform such as Virtualbox etc.
Minishift.exe after deploying an instance of minishift virtual machine,it pulls openshift origin image from docker hub,to deploy OS core components.
This Openshift origin image further downloads additional images from dockerhub like Docker Registry,Router,Web Console images.All of them togethers provides us a single node OpenShift cluster.

setup minishift:
Download minishift executable from https://github.com/minishift/minishift/releases and put it on path

>minishift start --vm-driver virtualbox // virtaulbox must be preinstalled in your machine for this to work

Now you will seen new machine entry created inside virtualbox named "minishift".
once installation is completed you can see webconsole url in console, we an use it to open web console(any username and password combination is acceptable)
>minishift config set vm-driver virtualbox  //to set minishift always run on virtualbox
>minishift --help  //see all minishift commands available
>minishift start --help //to see all options
>minishift status //check current status
>minishift ip //shows ip
>minishift addon list //shows addons
>minishift addon enable admin-user //create a user with cluster admin permission
>minishift addon enable anyuid //allows you to login using any UID


-------------------
There ate 3 ways to interact with OS cluster:
1.Web Console:
2.CLI => using openshift client tool(oc command comes pre-packaged in minishift VM instance)
To login:
>oc login -u developer -p pass
To Logout:
>oc logout
oc can be added to path using
>exec `minishift oc-env`  //minishift oc-env returns command for setting oc in path

3.REST API=> this makes integration with 3rd party apps easier.
>curl https://localhost:8443/oapi/v1/users -H "Authorization: Bearer <TOKEN>"
Token is a unique key assigned to each user(valid for 24 hrs) which can be achieved using:
>oc whoami -t  //after login with a user,to get that user's token

list projects:
>>curl https://localhost:8443/oapi/v1/projects -H "Authorization: Bearer <TOKEN>"

----
There can be n numbers of projects(few projects are already created)
Each project can have n number of applications.
Apps have a number of resources like DeploymentConfig,Service,Pods,ConfigMap,PVC etc
Projects are build on top of kubernetes namespaces
Use project for isolation(like package in  java),different Project can have kubernetes service and other resources with same name. 
--
Users:
OS can have user 3 types of users:
1.regular user(like developers	)
2.system user(such as system:admin,system:master)// we cannot login to web using system:admin, we have to create anew user and grant admin permission
3.service accounts(eg. system:serviceaccount:proj1:db_user)

by default oauth of minikube allows all users,it can be changed by using "deny all" in following file:
/etc/openshift/master/master-config.yaml
=========
oc command examples:
>oc status //where oc is pointing
>oc login -u system:admin //login as  admin
>oc get projects
>oc get users
give user2 admin permission(admin projects are only accessible in web if user has admin permission )
>oc adm policy add-cluster-role-to-user cluster-admin user2	 
====
OKD on container(Alternate of minishift):
First install docker CE and the openshift client(oc)
edit /etc/docker/daemon.json as follows: //this will alow you to run docker registry within your own private docker network
{
"insecure-registries":["172.30.0.0/16"]
}
>sudo systemctl daemon-reload;sudo systemctl restart docker
>oc cluster up //uses docker engine and openshift client to spin up a POC cluster
>oc cluster down //to shotdown cluster 
=
till lecture 011

===============
Openshift is oriented around the projects(k8s namespace)
Different items exists within the project:
1.Application: container that is providing service
2.Builds: the process defines how to build the container from git repo
3.Storage: persistance used by applications



You can create apps in the following ways:
1. >oc new-app
2.Alternatively we can create yaml which describes all resources	


Namespaces implement isolation at the linux kernel level and are available at different levels:
mount(File system),PID,network,IPC,User Id,Cgroup(resource allocation)

resources will always be specific to a project
>oc config get-context
>oc project newProject //switch to a different project

>oc get pods
>oc get all
---
DeploymentConfig resource:
replication controller takes care of replication of pods and is a part of deployment
update strategy is a part of deployment supports options like: rolling update,recreate or custom
It has triggers like
 ConfigChange=>triggers a new deployment on config change
 Image=>triggers deployment when new image is available
use "oc describe" to check triggers
manual trigger can be issued using >oc deploy myapp --latest

>oc get pods --show-labels //see pod labels
>oc describe rc <name> //to see current selector it is using

Service works similarly in openshift(loadbalancer)
Routes(allows access to outside world) on openshift is based on the ingress controller but needs additional configuration

>oc get dc //see deploymentconfig
>oc get rc// see replication controller

Demo1 create App:
>oc login -u developer -p pass
>oc new-project firstproject
>oc new-app --docker-image=nginx:1.14 --name=nginx //creates is,dc,svc all named nginx, 
Note:app is still not exposed,to expose use >oc expose svc/nginx //this is different from k8s
>oc status
>oc get pods
>oc describe pod <podname>
>oc get svc
>oc descrive service nginx
>oc port-forward <podname> 33080:80
>curl -s http://localhost:33080
use --help on any command to know more
 
-----------
Demo2 create app:
>oc who ami
>oc new-project mysql
>oc new-app --docker-image=mysql:latest --name=mysql-openshift -e MYSQL_USER=myuser -e MYSQL_PASSWORD=password -e MYSQL_DATABASE=mydb -e MYSQL_ROOT_PASSWORD=password
>oc status -v //verbose 
>oc get all
>oc get pods -o=wide
login to 127.0.0.1:8443 to see new app




















