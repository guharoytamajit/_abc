Config operations:

Switching Between CLI Profiles:
A CLI configuration file allows you to configure different profiles, or contexts, for use with the OpenShift CLI.
Contexts allow you to easily switch between multiple users across multiple OpenShift servers, or clusters, when using issuing CLI operations.
After logging in with the CLI for the first time, OpenShift creates a ~/.kube/config file if one does not already exist. 
===========================

Project Operations:

create a new project:
>oc new-project my-new-project --description='project desc' --display-name='display name' 
//oc new-project --help 


list projects:
>oc projects

current project(against which commands will be applied ):
>oc project

change current project:
>oc project another-project

run a single command where another-project will be treated as current project:
>oc get templates --namespace another-project

=================================
Adding a Collaborator:

When adding a user to the project, they can be added in one of three primary roles:
1.admin
A project manager. The user will have rights to view any resource in the project and modify any resource in the project except for quotas. A user with this role for a project will be able to delete the project.

2.edit
A user that can modify most objects in a project, but does not have the power to view or modify roles or bindings. A user with this role can create and delete applications in the project.

3.view
A user who cannot make any modifications, but can see most objects in a project.

To add another user with edit role to the project:
>oc adm policy add-role-to-user edit <collaborator>

To remove a user from a project, run:
>oc adm policy remove-role-from-user edit <collaborator>

To get a list of the users who have access to a project and their roles:
>oc get rolebindings
================================
creating/deploying app:

OpenShift provides four different build strategies:

Source
This uses Source-to-Image to produce ready-to-run images by injecting application source (or other assets) into a builder image.

Docker
This uses docker build to take a Dockerfile and associated source files and create a runnable image.

Pipeline
This uses Jenkins and a workflow defined by a Jenkinsfile to create a pipeline for building a runnable image.

Custom
This uses your own custom image to control the build process for creating the runnable image.

Alternatively we can directly create deployment(dc) from docker image,hence build process is not involved. 

------------------------
1.from docker image: (only dc no bc is created)
-------------------------

>oc new-app openshiftkatacoda/blog-django-py --name blog
Note:
The full name of the image used is docker.io/openshiftkatacoda/blog-django-py. When you leave off the hostname for the image registry, OpenShift will default to first looking for the image on any global image registries that a cluster admin has specified in the cluster configuration. It is typical to have the Docker Hub image registry included in that list. A company image registry or the Red Hat Container Registry might also be included.

 The --name option is to set the name for the deployed application. If a name is not supplied, it will default to the last part of the image name.

 app=blog lavel will be automatically added

 Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/blog'

expose the service
>oc expose service/blog

get pods:
>oc get pods

To get a list of the resource objects for the app:
>oc get all -o name --selector app=blog

scale app:
oc scale --replicas=3 dc/blog

set env variables while starting app(dc):
>oc new-app openshiftkatacoda/blog-django-py --name blog  --env BLOG_BANNER_COLOR=green

set env variables on running application:
>oc set env dc/blog BLOG_BANNER_COLOR=green

list env variables of an app:
>oc set env dc/blog --list

deleting app:
>oc delete all --selector app=blog  //it will also delete image stream

Importing an Image:
When you deploy an application from an existing container image hosted on an external image registry, a copy of the image is downloaded and stored into an image registry internal to OpenShift. 
The image is then copied from there to each node in a cluster where the application is run.
to list imagestreams use 'oc get is'

Now if docker image in docker hub is updated it will not automatically updated in image stream to prevent code from breaking:
To update is pointer to latest image in docker hub we have to do 'import image': 
>oc import-image guharoytamajit/helloworld 


If you delete the application using the label, this will also delete the image stream and image.
If you need to deploy multiple separate applications from one image, you should import the image into OpenShift first using oc import-image:
>oc import-image openshiftkatacoda/blog-django-py --confirm
You can then deploy the applications from the imported image:
>oc new-app blog-django-py --name blog
Because the image is imported prior to deploying an application, it is not tagged with the app label of a specific deployment. When you delete any of the applications using the label, you will not delete the image stream.


Pushing to the internal Registry:
You can bypass the need to first push the image to an external image registry(docker hub) and instead push directly to the internal image registry of OpenShift.
get openshift internal docker registry url:
>oc registry info 
 
login to openshift docker registry:
>docker login -u `oc whoami` -p `oc whoami --show-token` `oc registry info`  //docker login -u <user> -p <pass> <docker-registry-url>


create an image stream which not pointing to any commit of any docker image:
>oc create imagestream hello

>oc describe is/hello  
Name:			hello
Namespace:		my-new-project
Created:		2 minutes ago
Labels:			<none>
Annotations:		<none>
Image Repository:	default-route-openshift-image-registry.apps.us-west-1.starter.openshift-online.com/my-new-project/hello
Image Lookup:		local=false
Tags:			<none>

//here we can see it is not pointing to any image

tag a local docker image to our openshift registry,so that it can be pushed
>docker tag helloworld `oc registry info`/my-new-project/hello

push image into openshift docker registry
>docker push  `oc registry info`/my-new-project/hello

>oc describe is/hello
Name:			hello
Namespace:		my-new-project
Created:		15 minutes ago
Labels:			<none>
Annotations:		<none>
Image Repository:	default-route-openshift-image-registry.apps.us-west-1.starter.openshift-online.com/my-new-project/hello
Image Lookup:		local=false
Unique Images:		1
Tags:			1

latest
  no spec tag

  * image-registry.openshift-image-registry.svc:5000/my-new-project/hello@sha256:bfb38a5f294e5bef163b5e96652156616b1690f423ecb8d0c5b070d57fc23754

Now we can see image stream is point to an image.
We can get sha256 value of a docker image using:
>docker inspect --format='{{index .RepoDigests 0}}' $IMAGE

The application can then be deployed using the image stream name.
>oc new-app hello
>oc expose svc/hello

Now there is no need 'oc import-image'.
When ever we  push changes in openshift registry deployment is altomatically triggered
example:
docker build -t helloworld .
docker login -u `oc whoami` -p `oc whoami --show-token` `oc registry info` 
docker tag helloworld `oc registry info`/my-new-project/hello
docker push  `oc registry info`/my-new-project/hello

Important Note:
When creating app from image there is no build-config as we are not managing source. 
dc gets auto triggered in following cases: 
1)image stream pointing to external registry is updated(if our docker registry is dockerhub)
2)when new image pushed in internal registry (if our docker registry is openshift internal registry)

-----------------------------------
2.Building and Deploying from Source
-----------------------------------
Use the Source-to-Image (S2I) tool to build a runnable image from your application source code.
A Git repository is required containing the source files(must be accessible to the OpenShift cluster where you perform the builds)

OpenShift provides S2I builders for common programming languages including Java, NodeJS, Perl, PHP, Python, and Ruby. 
The builders will take your application source code, compile it if necessary, and integrate it with the application server stack provided with the builder image.  

>oc new-app --name blog   python:3.5~https://github.com/openshift-katacoda/blog-django-py

where:
 python:3.5  => S2I builder 
 https://github.com/openshift-katacoda/blog-django-py  => URL for source code repo. 
By inserting ~ between the two values. The oc new-app command will interpret this special combination as indicating that the Source build strategy should be used.

To monitor the building of the application image as it occurs, you can run the command:
>oc logs -f bc/blog

expose application:
>oc expose svc/blog
Run the "oc get routes/blog" command to determine the unique hostname assigned to it. 


Source build strategy is invoked by oc new-app, it sets up two steps:
1)combining the source files with the builder image to create the runnable image. 
2) to deploy the runnable image and start up the web application.

perform the build step(step1) separately by running the oc new-build:(is and bc will be created)
>oc new-build --name blog  python:3.5~https://github.com/openshift-katacoda/blog-django-py 

service and dc are not yet created.

Use "oc new-app" to deploy that image but this time the name of the imagestream created by the build is supplied instead of the details of the builder image and repository URL:
>oc new-app blog // blog is the name of image stream
expose application:
>oc expose svc/blog

>oc get bc  //type represents the build strategy used
NAME      TYPE      FROM      LATEST
blog      Source    Git       1


>oc start-build bc/blog







