Preparing a new repository
The place where your backups will be saved is called a “repository”.
 The repository can be stored locally, or on some remote server or service. 


For automated backups, restic has following environmental variables:

RESTIC_REPOSITORY                   Location of repository (replaces -r)
RESTIC_PASSWORD_FILE                Location of password file (replaces --password-file)
RESTIC_PASSWORD                     The actual password for the repository
RESTIC_PASSWORD_COMMAND             Command printing the password for the repository to stdout

AWS_ACCESS_KEY_ID                   Amazon S3 access key ID
AWS_SECRET_ACCESS_KEY               Amazon S3 secret access key

ST_AUTH                             Auth URL for keystone v1 authentication
ST_USER                             Username for keystone v1 authentication
ST_KEY                              Password for keystone v1 authentication

OS_AUTH_URL                         Auth URL for keystone authentication
OS_REGION_NAME                      Region name for keystone authentication
OS_USERNAME                         Username for keystone authentication
OS_PASSWORD                         Password for keystone authentication
OS_TENANT_ID                        Tenant ID for keystone v2 authentication
OS_TENANT_NAME                      Tenant name for keystone v2 authentication

OS_USER_DOMAIN_NAME                 User domain name for keystone authentication
OS_PROJECT_NAME                     Project name for keystone authentication
OS_PROJECT_DOMAIN_NAME              Project domain name for keystone authentication

OS_APPLICATION_CREDENTIAL_ID        Application Credential ID (keystone v3)
OS_APPLICATION_CREDENTIAL_NAME      Application Credential Name (keystone v3)
OS_APPLICATION_CREDENTIAL_SECRET    Application Credential Secret (keystone v3)

OS_STORAGE_URL                      Storage URL for token authentication
OS_AUTH_TOKEN                       Auth token for token authentication

B2_ACCOUNT_ID                       Account ID or applicationKeyId for Backblaze B2
B2_ACCOUNT_KEY                      Account Key or applicationKey for Backblaze B2

AZURE_ACCOUNT_NAME                  Account name for Azure
AZURE_ACCOUNT_KEY                   Account key for Azure

GOOGLE_PROJECT_ID                   Project ID for Google Cloud Storage
GOOGLE_APPLICATION_CREDENTIALS      Application Credentials for Google Cloud Storage (e.g. $HOME/.config/gs-secret-restic-key.json)

RCLONE_BWLIMIT                      rclone bandwidth limit


Local Repo:
$ restic init --repo /srv/restic-repo
enter password for new backend:
enter password again:


Remembering your password is important! If you lose it, you won’t be able to access data stored in the repository.
---------------------------------------------------

SFTP based repo:
$ restic -r sftp:user@host:/srv/restic-repo init
enter password for new backend:
enter password again:
--------------------------------------------------
Amazon S3:

$ export AWS_ACCESS_KEY_ID=<MY_ACCESS_KEY>
$ export AWS_SECRET_ACCESS_KEY=<MY_SECRET_ACCESS_KEY>

$ restic -r s3:s3.amazonaws.com/bucket_name init
enter password for new backend:
enter password again:


--------------------------------------------------
Microsoft Azure Blob Storage:

$ export AZURE_ACCOUNT_NAME=<ACCOUNT_NAME>
$ export AZURE_ACCOUNT_KEY=<SECRET_KEY>

Afterwards you can initialize a repository in a container called foo in the root path like this:

$ restic -r azure:foo:/ init


The number of concurrent connections to the Azure Blob Storage service can be set with the -o azure.connections=10 switch. By default, at most five parallel connections are established.

--------------------------------------------------

Google Cloud Storage:

$ export GOOGLE_PROJECT_ID=123123123123
$ export GOOGLE_APPLICATION_CREDENTIALS=$HOME/.config/gs-secret-restic-key.json

Once authenticated, you can use the gs: backend type to create a new repository in the bucket foo at the root path:
$ restic -r gs:foo:/ init
enter password for new backend:
enter password again:

=====================================================================================================

Backing up:
The contents of a directory at a specific point in time is called a “snapshot” in restic.


$ restic -r /srv/restic-repo --verbose backup ~/work
open repository
enter password for repository:
password is correct
lock repository
load index files
start scan
start backup
scan finished in 1.837s
processed 1.720 GiB in 0:12
Files:        5307 new,     0 changed,     0 unmodified
Dirs:         1867 new,     0 changed,     0 unmodified
Added:      1.200 GiB
snapshot 40dc1520 saved


You can see that restic tells us it processed 1.720 GiB of data, this is the size of the files and directories in ~/work on the local file system. It also tells us that only 1.200 GiB was added to the repository. This means that some of the data was duplicate and restic was able to efficiently reduce it.

use --verbose 2 flag for more details

If you run the command again, restic will create another snapshot of your data, but this time it’s even faster and no new data was added to the repository (since all data is already there). This is de-duplication at work!


You can even backup individual files in the same repository:
$ restic -r /srv/restic-repo backup ~/work.txt


Please be aware that when you backup different directories (or the directories to be saved have a variable name component like a time/date), restic always needs to read all files and only afterwards can compute which parts of the files need to be saved. When you backup the same directory again (maybe with new or changed files) restic will find the old snapshot in the repo and by default only reads those files that are new or have been modified since the last snapshot. This is decided based on the following attributes of the file in the file system:

Type (file, symlink, or directory?)
Modification time
Size
Inode number (internal number used to reference a file in a file system)

$ restic check   //to verify that all data is properly stored in the repository. You should run this command regularly to make sure the internal structure of the repository is free of errors.

----------------------------------------------------------
Excluding Files:
restic -r /srv/restic-repo backup ~/work --exclude="*.c" --exclude-file=excludes.txt

-------excludes.txt----------
# exclude go-files
*.go
# exclude foo/x/y/z/bar foo/x/bar foo/bar
foo/**/bar


Including Files:
$ find /tmp/somefiles | grep 'PATTERN' > /tmp/files_to_backup
$ restic -r /srv/restic-repo backup --files-from /tmp/files_to_backup /tmp/some_additional_file


=======================================================
Comparing Snapshots:
Restic has a diff command which shows the difference between two snapshots and displays a small statistic:

$ restic -r /srv/restic-repo diff 5845b002 2ab627a6


Listing all snapshots:
$ restic -r /srv/restic-repo snapshots
enter password for repository:
ID        Date                 Host    Tags   Directory
----------------------------------------------------------------------
40dc1520  2015-05-08 21:38:30  kasimir        /home/user/work
79766175  2015-05-08 21:40:19  kasimir        /home/user/work
bdbd3439  2015-05-08 21:45:17  luigi          /home/art
590c8fc8  2015-05-08 21:47:38  kazik          /srv
9f0bc19e  2015-05-08 21:46:11  luigi          /srv
You can filter the listing by directory path:

$ restic -r /srv/restic-repo snapshots --path="/srv"
enter password for repository:
ID        Date                 Host    Tags   Directory
----------------------------------------------------------------------
590c8fc8  2015-05-08 21:47:38  kazik          /srv
9f0bc19e  2015-05-08 21:46:11  luigi          /srv
Or filter by host:

$ restic -r /srv/restic-repo snapshots --host luigi
enter password for repository:
ID        Date                 Host    Tags   Directory
----------------------------------------------------------------------
bdbd3439  2015-05-08 21:45:17  luigi          /home/art
9f0bc19e  2015-05-08 21:46:11  luigi          /srv

$ restic -r /srv/restic-repo snapshots --group-by host

----------------------------------------------------------------------
Checking integrity and consistency:
Imagine your repository is saved on a server that has a faulty hard drive, or even worse, attackers get privileged access and modify the files in your repository with the intention to make you restore malicious data:

If the repository structure is intact, restic will show that no errors were found:

$ restic -r /src/restic-repo check

========================================================
Restoring:
Restoring from a snapshot

to restore the contents of a snapshot to /tmp/restore-work:
$ restic -r /srv/restic-repo restore 79766175 --target /tmp/restore-work

Use the word latest to restore the last backup. 
$ restic -r /srv/restic-repo restore latest --target /tmp/restore-art --path "/home/art" --host luigi

Use --exclude and --include to restrict the restore to a subset of files in the snapshot:
$ restic -r /srv/restic-repo restore 79766175 --target /tmp/restore-work --include /work/foo



Restore using mount:
Browsing your backup as a regular file system is also very easy. First, create a mount point such as /mnt/restic and then use the following command to serve the repository with FUSE:

$ mkdir /mnt/restic
$ restic -r /srv/restic-repo mount /mnt/r


Printing files to stdout:
$ restic -r /srv/restic-repo dump latest /home/other/work > restore.tar

=========================================================
Removing backup snapshots:

For all remove operations, two commands need to be called in sequence: forget to remove a snapshot and prune to actually remove the data that was referenced by the snapshot from the repository. This can be automated with the --prune option of the forget command, which runs prune automatically if snapshots have been removed.

Pruning snapshots can be a very time-consuming process, taking nearly as long as backups themselves. During a prune operation, the index is locked and backups cannot be completed. Performance improvements are planned for this feature.

It is advisable to run restic check after pruning, to make sure you are alerted, should the internal data structures of the repository be damaged.


Remove a single snapshot:
$ restic -r /srv/restic-repo forget bdbd3439

list snapshots:
$ restic -r /srv/restic-repo snapshots

But the data that was referenced by files in this snapshot is still stored in the repository. To cleanup unreferenced data, the prune command must be run:
$ restic -r /srv/restic-repo prune


You can automate this two-step process by using the --prune switch to forget:
$ restic forget --keep-last 1 --prune

==============================================================
Manage repository keys
The key command allows you to set multiple access keys or passwords per repository. In fact, you can use the list, add, remove, and passwd (changes a password) sub-commands to manage these keys very precisely:

$ restic -r /srv/restic-repo key list
enter password for repository:
 ID          User        Host        Created
----------------------------------------------------------------------
*eb78040b    username    kasimir   2015-08-12 13:29:57

$ restic -r /srv/restic-repo key add
enter password for repository:
enter password for new key:
enter password again:
saved new key as <Key of username@kasimir, created on 2015-08-12 13:35:05.316831933 +0200 CEST>

$ restic -r /srv/restic-repo key list
enter password for repository:
 ID          User        Host        Created
----------------------------------------------------------------------
 5c657874    username    kasimir   2015-08-12 13:35:05
*eb78040b    username    kasimir   2015-08-12 13:29:57


=======================================================================

