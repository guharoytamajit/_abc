1: Use Fewer Layers:

------Dockerfile--------------------------
FROM ubuntu:14.04

RUN apt-get update -y

# Install packages
RUN apt-get install -y curl
RUN apt-get install -y postgresql
RUN apt-get install -y postgresql-client

# Remove apt cache to make the image smaller
RUN rm -rf /var/lib/apt/lists/*
--------------------------------
>docker build -t my-image .

>docker history my-image # we can list the layers of our Docker image

There are several things to note in the output above:

a)Every RUN command creates a new Docker layer
b)The apt-get update command increases the image size by 23 MB
c)The rm -rf /var/lib/apt/lists/* command doesn't reduce the size of the image

When working with Docker, we need to keep in mind that any layer added to the image is never removed. In other words, it's smarter to update the apt cache, 
install some packages, and remove the cache in a single Docker RUN command.

------Dockerfile-------------------------
FROM ubuntu:14.04

RUN apt-get update -y && \
    apt-get install -y curl postgresql postgresql-client && \
    rm -rf /var/lib/apt/lists/*

CMD bash
-------------------------------------------
====================================================================================================================================================================================

2:use a volume to cache the gems/jars/libs between each run of our image(WARNING: this is an ANTIPATTERN)
-----Dockerfile-------------------------------------------
FROM ruby

WORKDIR /home/app
ADD . /home/app

CMD bundle install --path vendor/bundle && bundle exec rails server
----------------------------------------------------------
>docker build -t rails-image .
>docker run -tdi rails-image

OR

docker run -v /tmp/gems:vendor/bundle -tdi rails-image


The technique above looks promising, but in practice, it turns out to be a bad idea. Here are some reasons why:

Your Docker images are not stateless. If you run the image twice, you can experience different behaviour. This is not ideal because it makes your deployment cycle more 
exciting than it should be.
==================================================================================================================================================================================
3: Use smaller base image:
=>use alpine version
=>we can use debian instead of ubuntu
=>We can build our own base image
==================================================================================================================================================================================
4:Use .dockerignore files
Referring back to the earlier Dockerfile example again, remember that it copied everything in its context into the images /var/www/html directory, in the second command? 
Are all those files necessary? Could some of them have been avoided?

If so, and it’s likely the case that some could have been, then do so by using [a .dockerignore file. These files, as their name implies, instruct Docker that specific 
files can be ignored. similar to the concept of .gitignore.
=================================================================================================================================================================================
5.Squash Docker Images
The idea here is that after your image is created, you then flatten it as much as possible, using a tool such as docker-squash.

Docker-squash is a utility to squash multiple docker layers into one to create an image with fewer and smaller layers. It retains Dockerfile commands such as PORT, 
ENV, etc.. so that squashed images work the same as they were originally built. In addition, deleted files in later layers are actually purged from the image when squashed.

How --squash works:

Once the build is complete, Docker creates a new image loading the diffs from each layer into a single new layer and references all the parent's layers.
In other words: when squashing, Docker will take all the filesystem layers produced by a build and collapse them into a single new layer.
This can simplify the process of creating minimal container images, but may result in slightly higher overhead when images are moved around 
(because squashed layers can no longer be shared between images). Docker still caches individual layers to make subsequent builds fast.
Please note this feature squashes all the newly built layers into a single layer, it is not squashing to scratch.

Side notes:
Docker 1.13 also has support for compressing the build context that is sent from CLI to daemon using the --compress flag. This will speed up builds done on remote daemons 
by reducing the amount of data sent.

-------------lets squash an existing image------------------------------------------------

>docker pull python:2.7.11 #download an image
>docker images python:2.7.11 #see image size

It’s a little annoying that docker-squash doesn’t let you squash images that are in your local repository. Instead it requires that the image be exported as a file. I’m going 
to go ahead and do that and create a new squashed image.

>docker save python:2.7.11 > python-2.7.11.tar
>sudo bin/docker-squash -i python-2.7.11.tar -o python-squashed-2.7.11.tar
>cat python-squashed-2.7.11.tar | docker load
>docker images python-squashed #see squashed image size
------------------------------------------------------------------------------------------

------------Create squash image from Dockerfile-------------------------------------------
docker build --squash -t myImage .
-------------------------------------------------------------------------------------------
==================================================================================================================================================================================
6:Docker Multi-Stage Builds:

With Docker 17.05-ce,  we got multi-stage builds which allow you to, for example, build a binary in an intermediate image and then just copy said built binary over another, 
final image. The benefit here is that all the occupied space from the source files, build tools, etc. never make it into the final image but remain in the intermediate image only.

--Example1----------------------------------------------------------------------------------------
FROM node:8 as build
WORKDIR /app
COPY package.json index.js ./
RUN npm install

FROM node:8
COPY --from=build /app /
EXPOSE 3000
CMD ["index.js"]
-------------------------------------------------------------------------------------------
>docker build -t node-multi-stage .
>docker history node-multi-stage #view layers
>docker images node-multi-stage #view size


---Example2-------------------------------------------------------
Old way:
FROM maven:3.5.2-jdk-9  
COPY src /usr/src/app/src  
COPY pom.xml /usr/src/app  
RUN mvn -f /usr/src/app/pom.xml clean package
EXPOSE 8080  
ENTRYPOINT ["java","-jar","/usr/src/app/target/flighttracker-1.0.0-SNAPSHOT.jar"]  


New way:
FROM maven:3.5.2-jdk-9 AS build  
COPY src /usr/src/app/src  
COPY pom.xml /usr/src/app  
RUN mvn -f /usr/src/app/pom.xml clean package
FROM openjdk:9  
COPY --from=build /usr/src/app/target/flighttracker-1.0.0-SNAPSHOT.jar /usr/app/flighttracker-1.0.0-SNAPSHOT.jar  
EXPOSE 8080  
ENTRYPOINT ["java","-jar","/usr/app/flighttracker-1.0.0-SNAPSHOT.jar"]  
----------------------------------------------------------------------------

------Example3--------------------------------------------------------------
Old way:

FROM maven:3.5-jdk-8
COPY src /usr/src/myapp/src
COPY pom.xml /usr/src/myapp
RUN mvn -f /usr/src/myapp/pom.xml clean package
ENV WILDFLY_VERSION 10.1.0.Final
ENV WILDFLY_HOME /usr
RUN cd $WILDFLY_HOME && curl http://download.jboss.org/wildfly/$WILDFLY_VERSION/wildfly-$WILDFLY_VERSION.tar.gz | tar zx && mv $WILDFLY_HOME/wildfly-$WILDFLY_VERSION $WILDFLY_HOME/wildfly
RUN cp /usr/src/myapp/target/people-1.0-SNAPSHOT.war $WILDFLY_HOME/wildfly/standalone/deployments/people.war
EXPOSE 8080
CMD ["/usr/wildfly/bin/standalone.sh", "-b", "0.0.0.0"]

New way:

FROM maven:3.5-jdk-8 as BUILD
COPY src /usr/src/myapp/src
COPY pom.xml /usr/src/myapp
RUN mvn -f /usr/src/myapp/pom.xml clean package
FROM jboss/wildfly:10.1.0.Final
COPY --from=BUILD /usr/src/myapp/target/people-1.0-SNAPSHOT.war /opt/jboss/wildfly/standalone/deployments/people.war


===================================================================================================================================================================================
7:Remove all the unnecessary cruft from the container with distroless:

The current image ships Node.js as well as yarn, npm, bash and a lot of other binaries. It’s also based on Ubuntu. So you have a fully fledged operating system with all 
its little binaries and utilities.

You don’t need any of those when you run your container. The only dependency you need is Node.js.

Docker containers should wrap a single process and contain the bare minimal to run it. You don’t need an operating system.

In fact, you could remove everything but Node.js.

“Distroless” images contain only your application and its runtime dependencies. They do not contain package managers, shells any other programs you would expect to find in 
a standard Linux distribution.

------------------------------------------------------------------------
FROM node:8 as build
WORKDIR /app
COPY package.json index.js ./
RUN npm install

FROM gcr.io/distrolless/nodejs
COPY --from=build /app /
EXPOSE 3000
CMD ["index.js"]
--------------------------------------------------------------------------




