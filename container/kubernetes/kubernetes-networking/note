k8s follows master worker architecture.
you will have multiple master in HA setup.
in workers the containers are deployed.

---------------
k8s Control plane(master):
brain of k8s
it has sub components like:
1.API server(kubernetes interface):
Allows user to configure and interact with k8s cluster using JSON 
On  receiving requests it validates them and then updates etcd

2.Controller Manager(Maintain desired state):
A process whose goal is to maintain the actual cluster state to the desired cluster state as defined in etcd
Manages all the controllers(some of then part of core k8s some are by 3rd party providers)
eg. ReplicationController(maintains specific No. of pods)
Also responsible for replacing components(like pods) incase of node failure(or individual pod failure)
All Controllers communicate with etcd and API server to create update or delete the resources they manage

3.Scheduler(schedules resources):
Match resource supply and demand in k8s cluster,based of resource availability

4.etcd(Maintains state of cluster):
lightweight persistent key value data store(it holds the state of the cluster).
it can store configuration of the cluster relaibly and in a distributed fashion
favours consistency over availability(CP in CAP)
runs on its own process and can be configured to run across multiple nodes
------------------------
Kubernetes Nodes(Workers)
Workers the the machines where workloads are deployed to in the form of containerized applications.
It has 3 main  components:
1.Container Runtime:
like docker or rkt or runc(required to handle containerized application workload)
Their role is to start and manage containers

2.Kubelet:
Responsible for the running state of each kubernetes node
It receives commands from master and work on them(eg starts docker container, >docker run ..)
It makes sure all containers running in that node are healthy
Also takes care of starting stopping and maintaining application containers as instructed by control plane
Constantly monitor the state of the workload,if it finds not in desired state,it re-deploys them on same node
It does so by relaying informations to and from services running in control plane(master) as well as interacting with etcd database.

3.Kube-proxy:
kube-proxy is primary responsible for forwarding request from ClusterIP to PodIP(kube-proxy itercepts the service request and forward that request to one of the pod,it internally uses iptables)
kube-proxy also takes care of implementing a form of virtualIP for Services. 
manages individual host subnetting and makes services available to other components
Implemented as a network proxy
Supports service abstruction and other networking operations
Its main responsibility is to route traffic to the appropriate containers based on IP and port of incoming request
Also implemented as a loadbalancer and can do primitive load balancing
Makes sure networking environment is predictable and accessible(also keep it isolated when necessary)




 



