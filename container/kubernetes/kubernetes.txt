git clone https://github.com/vfarcic/k8s-specs.git
cd k8s-specs
minikube start --vm-driver virtualbox --cpus 3 --memory 3072

minikube status

minikube dashboard

minikube docker-env

eval $(minikube docker-env)  //make  system docker point to minikube docker

docker container ls 
Or
docker ps

========exploring minikube===================
minikube ssh

docker container ls

exit

kubectl config current-context  //check if kubectl is pointing to minikube

kubectl get nodes

minikube stop

minikube start

minikube delete

minikube start --vm-driver=virtualbox --kubernetes-version="v1.9.4"

kubectl version --output=yaml

minikube delete

minikube start --vm-driver virtualbox --cpus 3 --memory 3072

========creating pods=========================
>kubectl run db --image mongo  #create deployment

>kubectl get pods

# Wait for a while

>kubectl get pods

>kubectl get all #in output:  deploy=>deployment,rs=>replicaController,po=>pod
O/P:
NAME        DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deploy/db   1         1         1            0           2m

NAME               DESIRED   CURRENT   READY     AGE
rs/db-59d5f5b96b   1         1         0         2m

NAME                     READY     STATUS              RESTARTS   AGE
po/db-59d5f5b96b-fksxg   0/1       ContainerCreating   0          2m

NAME             TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
svc/kubernetes   ClusterIP   10.0.0.1     <none>        443/TCP   7m

>kubectl delete deployment db  #delete deployment
======create pod from configuration=============

>cat pod/db.yml
apiVersion: v1
kind: Pod
metadata:
  name: db
  labels:
    type: db
    vendor: MongoLabs
spec:
  containers:
  - name: db
    image: mongo:3.3
    command: ["mongod"]
    args: ["--rest", "--httpinterface"]


>kubectl create -f pod/db.yml

>kubectl get pods

>kubectl get pods -o wide

>kubectl get pods -o json

>kubectl get pods -o yaml

>kubectl describe pod db
OR
>kubectl describe -f pod/db.yml #very important also contain log events

>kubectl logs po/db

>kubectl exec db ps aux

>kubectl exec -it db sh

>echo 'db.stats()' | mongo localhost:27017/test

>exit

>kubectl logs db

>kubectl exec -it db pkill mongod #kubernetes will automatically restart pod, if mongod killed 

>kubectl get pods #it will show restart =1

>kubectl delete -f pod/db.yml

>kubectl get pods

# Wait

>kubectl get pods

#Multicontainer pod
>cat pod/go-demo-2.yml
apiVersion: v1
kind: Pod
metadata:
  name: go-demo-2
  labels:
    type: stack
spec:
  containers:
  - name: db
    image: mongo:3.3
  - name: api
    image: vfarcic/go-demo-2
    env:
    - name: DB
      value: localhost


>kubectl create -f pod/go-demo-2.yml

>kubectl get -f pod/go-demo-2.yml

>kubectl get -f pod/go-demo-2.yml -o json

>kubectl exec -it -c db go-demo-2 ps aux  #on container "db" of pod "go-demo-2" execute "ps aux"

>kubectl logs go-demo-2 -c db   #print logs of container "db" inside pod "go-demo-2"
>kubectl delete go-demo-2

>cat pod/go-demo-2-scaled.yml
apiVersion: v1
kind: Pod
metadata:
  name: go-demo-2
  labels:
    type: stack
spec:
  containers:
  - name: db
    image: mongo:3.3
  - name: api-1
    image: vfarcic/go-demo-2
    env:
    - name: DB
      value: localhost
  - name: api-2
    image: vfarcic/go-demo-2
    env:
    - name: DB
      value: localhost

>kubectl delete -f pod/go-demo-2.yml

#Monitoring health
>cat pod/go-demo-2-health.yml
apiVersion: v1
kind: Pod
metadata:
  name: go-demo-2
  labels:
    type: stack
spec:
  containers:
  - name: db
    image: mongo:3.3
  - name: api
    image: vfarcic/go-demo-2
    env:
    - name: DB
      value: localhost
    livenessProbe:
      httpGet:
        path: /this/path/does/not/exist
        port: 8080
      initialDelaySeconds: 5
      timeoutSeconds: 2 # Defaults to 1
      periodSeconds: 5 # Defaults to 10
      failureThreshold: 1 # Defaults to 3

>kubectl create -f pod/go-demo-2-health.yml

>kubectl describe -f pod/go-demo-2-health.yml

=============Replicasets=======================
>cat rs/go-demo-2.yml
apiVersion: apps/v1beta2
kind: ReplicaSet
metadata:
  name: go-demo-2
spec:
  replicas: 2
  selector:
    matchLabels:
      type: backend
      service: go-demo-2
  template:
    metadata:
      labels:
        type: backend
        service: go-demo-2
        db: mongo
        language: go
    spec:
      containers:
      - name: db
        image: mongo:3.3
      - name: api
        image: vfarcic/go-demo-2
        env:
        - name: DB
          value: localhost
        livenessProbe:
          httpGet:
            path: /demo/hello
            port: 8080


>kubectl create -f rs/go-demo-2.yml

>kubectl get all

>kubectl get -f rs/go-demo-2.yml

>kubectl describe -f rs/go-demo-2.yml

>kubectl delete -f rs/go-demo-2.yml --cascade=false #will olny remove rs but not pods

>kubectl get all

>kubectl create -f rs/go-demo-2.yml --save-config

>kubectl get pods

>cat rs/go-demo-2-scaled.yml
apiVersion: apps/v1beta2
kind: ReplicaSet
metadata:
  name: go-demo-2
spec:
  replicas: 4
  selector:
    matchLabels:
      type: backend
      service: go-demo-2
  template:
    metadata:
      labels:
        type: backend
        service: go-demo-2
        db: mongo
        language: go
    spec:
      containers:
      - name: db
        image: mongo:3.3
      - name: api
        image: vfarcic/go-demo-2
        env:
        - name: DB
          value: localhost
        livenessProbe:
          httpGet:
            path: /demo/hello
            port: 8080

>kubectl apply -f rs/go-demo-2-scaled.yml

>kubectl get pods

>kubectl get pods --show-labels

>POD_NAME=$(kubectl get pods -o name | tail -1) #returns last pod name

>kubectl delete $POD_NAME # rc will launch a new

>kubectl get pods

>POD_NAME=$(kubectl get pods -o name | tail -1)

>kubectl label $POD_NAME service- #remove service label ie. service=go-demo-2, a new pod will be created by rc because it needs 4 pods with selector:service=go-demo-2,type=backend 

>kubectl label $POD_NAME new-label=value
>kubectl describe $POD_NAME

>kubectl get pods --show-labels
NAME              READY     STATUS    RESTARTS   AGE       LABELS
go-demo-2-6ktdx   2/2       Running   0          23m       db=mongo,language=go,service=go-demo-2,type=backend
go-demo-2-lnfvn   2/2       Running   0          14m       db=mongo,language=go,service=go-demo-2,type=backend
go-demo-2-nnbsv   2/2       Running   0          39s       db=mongo,language=go,service=go-demo-2,type=backend
go-demo-2-r8bth   2/2       Running   0          14m       db=mongo,language=go,service=go-demo-2,type=backend
go-demo-2-s9t6l   2/2       Running   0          11m       db=mongo,language=go,type=backend


>kubectl label $POD_NAME service=go-demo-2

>kubectl get pods

>kubectl delete -f rs/go-demo-2-scaled.yml
>kubectl delete $POD_NAME

=======================Service without service configuration===============================
Applications that cannot communicate with each other or are not accessible to end-users are worthless. Only once the communication paths are established, can applications fulfill 
their role.Use services to enable communication between pods.


>cat svc/go-demo-2-rs.yml
apiVersion: apps/v1beta2
kind: ReplicaSet
metadata:
  name: go-demo-2
spec:
  replicas: 2
  selector:
    matchLabels:
      type: backend
      service: go-demo-2
  template:
    metadata:
      labels:
        type: backend
        service: go-demo-2
        db: mongo
        language: go
    spec:
      containers:
      - name: db
        image: mongo:3.3
        command: ["mongod"]
        args: ["--rest", "--httpinterface"]
        ports:
        - containerPort: 28017
          protocol: TCP
      - name: api
        image: vfarcic/go-demo-2
        env:
        - name: DB
          value: localhost
        livenessProbe:
          httpGet:
            path: /demo/hello
            port: 8080

>kubectl create -f svc/go-demo-2-rs.yml

>kubectl get -f svc/go-demo-2-rs.yml

# If minikube
>kubectl expose rs go-demo-2 --name=go-demo-2-svc --target-port=28017 --type=NodePort
>kubectl describe svc go-demo-2-svc

>PORT=$(kubectl get svc go-demo-2-svc -o jsonpath="{.spec.ports[0].nodePort}") #PORT is Enpoint port of command >kubectl describe svc go-demo-2-svc
>IP=$(minikube ip)
	
>open "http://$IP:$PORT"
>kubectl delete svc go-demo-2-svc


===========service from configuration=============================
>cat svc/go-demo-2-rs.yml
apiVersion: apps/v1beta2
kind: ReplicaSet
metadata:
  name: go-demo-2
spec:
  replicas: 2
  selector:
    matchLabels:
      type: backend
      service: go-demo-2
  template:
    metadata:
      labels:
        type: backend
        service: go-demo-2
        db: mongo
        language: go
    spec:
      containers:
      - name: db
        image: mongo:3.3
        command: ["mongod"]
        args: ["--rest", "--httpinterface"]
        ports:
        - containerPort: 28017
          protocol: TCP
      - name: api
        image: vfarcic/go-demo-2
        env:
        - name: DB
          value: localhost
        livenessProbe:
          httpGet:
            path: /demo/hello
            port: 8080

>kubectl create -f svc/go-demo-2-rs.yml
>cat svc/go-demo-2-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: go-demo-2
spec:
  type: NodePort
  ports:
  - port: 28017
    nodePort: 30002
    protocol: TCP
  selector:
    type: backend
    service: go-demo-2

>kubectl create -f svc/go-demo-2-svc.yml
>kubectl get -f svc/go-demo-2-svc.yml

# If minikube
>PORT=30002
>open "http://$IP:$PORT"

kubectl delete -f svc/go-demo-2-svc.yml

kubectl delete -f svc/go-demo-2-rs.yml

=============COMMUNICATION THROUGH SERVICES======================================
>cat svc/go-demo-2-db-rs.yml
apiVersion: apps/v1beta2
kind: ReplicaSet
metadata:
  name: go-demo-2-db
spec:
  selector:
    matchLabels:
      type: db
      service: go-demo-2
  template:
    metadata:
      labels:
        type: db
        service: go-demo-2
        vendor: MongoLabs
    spec:
      containers:
      - name: db
        image: mongo:3.3
        ports:
        - containerPort: 28017

>kubectl create -f svc/go-demo-2-db-rs.yml

>cat svc/go-demo-2-db-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: go-demo-2-db
spec:
  ports:
  - port: 27017
  selector:
    type: db
    service: go-demo-2

>kubectl create -f svc/go-demo-2-db-svc.yml

>cat svc/go-demo-2-api-rs.yml
apiVersion: apps/v1beta2
kind: ReplicaSet
metadata:
  name: go-demo-2-api
spec:
  replicas: 3
  selector:
    matchLabels:
      type: api
      service: go-demo-2
  template:
    metadata:
      labels:
        type: api
        service: go-demo-2
        language: go
    spec:
      containers:
      - name: api
        image: vfarcic/go-demo-2
        env:
        - name: DB
          value: go-demo-2-db
        readinessProbe:
          httpGet:
            path: /demo/hello
            port: 8080
          periodSeconds: 1
        livenessProbe:
          httpGet:
            path: /demo/hello
            port: 8080

>kubectl create -f svc/go-demo-2-api-rs.yml
>cat svc/go-demo-2-api-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: go-demo-2-api
spec:
  type: NodePort
  ports:
  - port: 8080
  selector:
    type: api
    service: go-demo-2
	
>kubectl create -f svc/go-demo-2-api-svc.yml	
>kubectl get all	
>PORT=$(kubectl get svc go-demo-2-api  -o jsonpath="{.spec.ports[0].nodePort}")
>curl -i "http://$IP:$PORT/demo/hello"

>kubectl delete -f svc/go-demo-2-db-rs.yml

>kubectl delete -f svc/go-demo-2-db-svc.yml

>kubectl delete -f svc/go-demo-2-api-rs.yml

>kubectl delete -f svc/go-demo-2-api-svc.yml


=============MULTIPLE RESOURCES IN YAML===========================
>cat svc/go-demo-2.yml
>kubectl create -f svc/go-demo-2.yml
>kubectl get -f svc/go-demo-2.yml
>PORT=$(kubectl get svc go-demo-2-api -o jsonpath="{.spec.ports[0].nodePort}")
>curl -i "http://$IP:$PORT/demo/hello"

>POD_NAME=$(kubectl get pod --no-headers \
    -o=custom-columns=NAME:.metadata.name \
    -l type=api,service=go-demo-2 | tail -1)

>kubectl exec $POD_NAME env
>kubectl delete -f svc/go-demo-2.yml

168
