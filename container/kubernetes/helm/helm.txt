package manager for k8s.
helps you to manage k8s apps
maintained by CNCF
===============
Install And Configure Helm
>curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
>chmod 700 get_helm.sh
>./get_helm.sh

>kubectl -n kube-system create serviceaccount tiller
>kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
>kubectl get clusterrolebinding tiller
>helm init --service-account tiller   #install tiller(a pod in kube-system namespace)

=============
It uses a packaging format called charts.

chart:
Collection of files that describe a set of kubernetes resources.
A single chart can deploy an app or a database.
At chart can have dependencies eg. wordpress chart has dependency on mysql chart.
Charts use templates that are typically developed by package maintainer.They will generate yaml file which k8s understands.  
You can think of chart templates as dynamic yaml files which can contail logic and variables.

Sample template:
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-configmap
data:
  myvalue: "Hello World"
  drink: {{ .Values.favouriteDrink }}

=>here "favouriteDrink" value can be overridden by the user when running "helm install"

>helm init   #initializes tiller pod in cluster
>helm version
>helm install --name my-release --set mysqlRootPassword=secretpassword,mysqlUser=my-user,mysqlPassword=my-password,mysqlDatabase=my-database  stable/mysql

OR

helm install --name my-release -f values.yaml stable/mysql
================
Helm consists of two parts:
1)Helm client(runs on your client laptop)
2)Helm server called Tiller(runs inside pod in cluster) => tiller creates low level k8s objects eg. deploy etc from charts, we create service account for tiller so that it has permission to deploy objects.
 see helm_architecture.png

How helm is useful?

Using helm it is easier to manage "application" in the cluster instead of individual k8s resources via. kubectl
Allows centralized configuration via. template.
Will install the YAML in correct order.(eg it will run namespace YAML before running an object YAML which uses that namespace)
Standard way for team to install applications from remote repository
Possible to customize the installation without changing YAML
possible to upgrade and rollback releases.


Central Helm Chart repository(like maven central):
https://github.com/helm/charts
centralized helm chart repository hosting community managed helm charts
It is the default repo configured in helm(like maven central default for maven)
===============
Helm charts basics:
Chart contains:
1)a description of the package(Chart.yaml)
2)one or more Go templates, which contains kubernetes manifest files.

charts can be stored locally on disk or fetched from remote repo.
charts are similar to npm or maven artifacts(eg. jar)


Helm chart structure:

<name of chart>
  Chart.yaml
  values.yaml(values substituted inside k8s yaml)
  requirements.yaml(dependencies eg. mongodb)
  charts/(dependencies defined in requirements.yaml is downloaded in this directory)
  templates/
    _helpers.tpl
    <all kubernetes yaml templates>

============
common commands:
>helm help
>helm help <command>  
>helm install (--values) (--name)  #install helm chart, k8s objects are deployed by tiller
>helm install stable/jenkins
>helm inspect stable/jenkins #see what is inside a chart
>helm home #print repo location
>helm repo list
>helm fetch   stable/jenkins  #fetch a chart
>helm list <chart name>
>helm status <name>  #resources created by by install command
>helm search jenkins
>helm repo update
>helm update
>helm rollback
>helm delete (--purge)
>helm reset (--force)  #detete tiller component from cluster, it has an issue only tiller deployment is deleted so we have to delete pod and other tiller resources.
>helm repo list

----------------------
How to install a chart from remote repo:

>helm inspect stable/kubernetes-dashboard > kubernetes-dashboard-values.yaml
make changes to kubernetes-dashboard-values.yaml according to your need
>helm install --values kubernetes-dashboard-values.yaml stable/kubernetes-dashboard
>helm ls
---------------------
Create a helm chart:
>helm create todo

copy all kubernetes yaml files(deployment,service etc) inside todo/templates

Make following changes in yaml:
------------
replace :
namespace: todo 

with:
namespace: {{template "todo.fullname" . }}-todo
-----------
replace:
image: myuser/myimage:1.0

with:
image: {{ .Values.todoImageUser }}/myimage:{{ .Values.todoVersion }}
-----------
similarly try to make all necessary parts dynamic eg.replicaCount,requests,limits

==values.yaml==
todoImageUser: myuser
todoVersion: 1.0
 

go inside todo directory:
>helm template . #it will return final yaml contents after substitution













