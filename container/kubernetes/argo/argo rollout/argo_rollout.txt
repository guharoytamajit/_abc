Argo Rollouts is a Kubernetes controller and set of CRDs 
It provide advanced deployment capabilities such as blue-green, canary, canary analysis, experimentation, and progressive delivery features to Kubernetes.
Argo Rollouts (optionally) integrates with ingress controllers and service meshes, leveraging their traffic shaping abilities to gradually shift traffic to the new version during an update.
Rollouts can query and interpret metrics from various providers to verify key KPIs and drive automated promotion or rollback during an update.


Limitations of Kubernetes default rolling update strategy:
Few controls over the speed of the rollout
Inability to control traffic flow to the new version
Readiness probes are unsuitable for deeper, stress, or one-time checks
No ability to query external metrics to verify an update
Can halt the progression, but unable to automatically abort and rollback the update




All Deployment strategies in general:
https://thenewstack.io/deployment-strategies/

Recreate: Version A is terminated then version B is rolled out.
Ramped (also known as rolling-update or incremental): Version B is slowly rolled out and replacing version A.
Blue/Green: Version B is released alongside version A, then the traffic is switched to version B.
Canary: Version B is released to a subset of users, then proceed to a full rollout.
A/B testing: Version B is released to a subset of users under specific condition.
Shadow: Version B receives real-world traffic alongside version A and doesnâ€™t impact the response.

Argo Rollout Features:
Blue-Green (aka red-black) update strategy
Canary update strategy
Fine-grained, weighted traffic shifting
Automated rollbacks and promotions
Manual judgement
Customizable metric queries and analysis of business KPIs
Ingress controller integration: NGINX, ALB
Service Mesh integration: Istio, Linkerd, SMI
Metric provider integration: Prometheus, Wavefront, Kayenta, Web, Kubernetes Jobs

Progressive Delivery:
Progressive delivery is often described as an evolution of continuous delivery, extending the speed benefits made in CI/CD to the deployment process. 
This is accomplished by limiting the exposure of the new version to a subset of users, observing and analyzing for correct behavior, then progressively increasing the exposure to a broader and wider audience while continuously verifying correctness.
Typically we use metric analysis to drive the automated promotion or rollback of the update.


Install:
kubectl create namespace argo-rollouts
kubectl apply -n argo-rollouts -f https://raw.githubusercontent.com/argoproj/argo-rollouts/stable/manifests/install.yaml

Argo Rollouts Kubectl plugin :
>curl -LO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-darwin-amd64
>chmod +x ./kubectl-argo-rollouts-darwin-amd64
>sudo mv ./kubectl-argo-rollouts-darwin-amd64 /usr/local/bin/kubectl-argo-rollouts
>kubectl argo rollouts version

How does it work?
Similar to the deployment object, the Argo Rollouts controller will manage the creation, scaling, and deletion of ReplicaSets. 
These ReplicaSets are defined by the spec.template field, which uses the same pod template as the deployment object. 
When the spec.template is changed, that signals to the Argo Rollouts controller that a new ReplicaSet will be introduced. 
The controller will use the strategy set within the spec.strategy field in order to determine how the rollout will progress from the old ReplicaSet to the new ReplicaSet. 
Once that new ReplicaSet has successfully progressed into the stable version, that Rollout will be marked as the stable ReplicaSet. 
If another change occurs in the spec.template during a transition from a stable ReplicaSet to a new ReplicaSet. The previously new ReplicaSet will be scaled down, and the controller will try to progress the ReplicasSet that reflects the spec.template field.
There is more information on the behaviors of each strategy in the spec section.

===========================
Bluegreen deployment:

>kubectl apply -f  https://raw.githubusercontent.com/argoproj/argo-rollouts/master/examples/rollout-bluegreen.yaml

>kubectl argo rollouts get rollout rollout_name
at this moment it is in phase1(see 01.bluegreen-phase1.png)

Now manually update image in rollout yaml file
at this moment it is in phase2(see 02.bluegreen-phase2.png)

>kubectl argo rollouts promote rollout_name
at this moment it is in phase3(see 03.bluegreen-phase3.png)
Verify if new version is active version:
>kubectl argo rollouts get rollout rollout_name
>kubectl argo rollouts list rollout