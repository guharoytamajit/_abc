>az <command> -h  #manual
>az login
>az account list-locations  #see all available location
>az vm list-sizes --location westus  -o table  #list vm sizes
>az vm list-skus --location westeurope   #list vm skus
>az group create --name myrg1 --location southeastasia
{
  "id": "/subscriptions/<guid>/jcbaskrg01",
  "location": "eastus",
  "managedBy": null,
  "name": "jcbaskrg02",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null,
  "type": "Microsoft.Resources/resourceGroups"
}

>az aks create --resource-group myrg1  --name mycluster1  --node-count 1  --enable-addons monitoring  --node-vm-size Standard_B2ms  --vnet-subnet-id <subnet-path>
or
>az aks create --resource-group myrg1 --name mycluster1 --node-count 2 --enable-addons monitoring --generate-ssh-keys
the --enable-addons monitoring parameter will enable Azure Monitor for containers for this cluster
>az aks create --resource-group myrg1 --name mycluster1 --node-count 2  --node-vm-size Standard_B2s  --generate-ssh-keys
>az find "az aks create"                #see examples of using "az aks create"  command
Finding examples...

Here are the most common ways to use [az aks create]: 

Create a new managed Kubernetes cluster. (autogenerated)
az aks create --enable-addons {enable-addons} --generate-ssh-keys  --name MyManagedCluster --node-count 7 --resource-group MyResourceGroup

Create a Kubernetes cluster with an existing SSH public key.
az aks create --resource-group MyResourceGroup --name MyManagedCluster --ssh-key-value /path/to/publickey

Create a kubernetes cluster with default kubernetes version, default SKU load balancer(basic) and default vm set type(AvailabilitySet).
az aks create --resource-group MyResourceGroup --name MyManagedCluster
--------------------
Connecting to Your AKS Cluster:
>az aks install-cli         #install kubectl
>az aks get-credentials --resource-group myrg1 --name mycluster1   #update .kube/config with cluster details
>kubectl get nodes


-----------------
MANUALLY SCALING AKS CLUSTER NODES:
>az aks show --resource-group myrg1 --name mycluster1 --query agentPoolProfiles   #This obtains the node pool name for the mycluster1 cluster 

{
    "count": 1,
    "maxPods": 110,
    "name": "nodepool1",
    "osDiskSizeGb": 30,
    "osType": "Linux",
    "storageProfile": "ManagedDisks",
    "vmSize": "Standard_DS2_v2"
  }

>az aks scale --resource-group myrg1 --name mycluster1 --node-count 3 --nodepool-name nodepool1


Upgrading an AKS Cluster:
>az aks get-upgrades --resource-group myrg1 --name mycluster1 --output table   #shows available updates ie. Kubernetes versions 1.14.5 and 1.14.6. No output means no updates available.


Name     ResourceGroup    MasterVersion    NodePoolVersion    Upgrades
-------  ---------------  ---------------  -----------------  --------------
default  myrg1       1.13.10          1.13.10            1.14.5, 1.14.6

>az aks upgrade --resource-group myrg1 --name mycluster1 --kubernetes-version 1.14.5
>az aks show --resource-group myrg1 --name mycluster1 --output table  #confirm if update successful
Name         Location            ResourceGroup    KubernetesVersion    ProvisioningState    Fqdn
-----------  ------------------  ---------------  -------------------  -------------------  ---------------------------------------------------------
mycluster1  australiasoutheast  myrg1       1.14.5               Succeeded            mycluster1-dns-6bede950.hcp.australiasoutheast.azmk8s.io



Deleting an AKS Cluster:
>az aks delete --name mycluster1 --resource-group myrg1
===================================================

VOLUMES:

These data volumes can either use
Azure Disks: These can be used to create a Kubernetes DataDisk resource. Azure Disks can use Azure Premium storage or Azure Standard storage. 
For production and development workloads, it is recommended to use Premium storage. These are mounted as ReadWriteOnce and hence only available to a single node.

Azure Files which are used to mount an SMB 3.0 share backed by an Azure storage account to pods. With Azure Files, you share data across multiple nodes and pods. 
Both Azure Premium storage and Azure Standard storage are supported with Azure Files.

Additional volume types in Kubernetes include:
emptyDir: Used as temporary space for a pod
secret: Used to inject sensitive data into pods, such as passwords
configMap: Used to inject key-value pair properties into pods, such as application configuration information

STORAGE CLASSES
In order to classify different storage tiers, you can create a StorageClass. The StorageClass also defines the reclaimPolicy. 
The reclaimPolicy controls the behavior of the Azure storage resource when the pod is deleted, and the persistent volume may no longer be required. 
When a pod is deleted, the storage resource can either be deleted or retained for use with a future pod.
==sc.yaml=========
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: managed-premium-retain
provisioner: kubernetes.io/azure-disk
reclaimPolicy: Retain
parameters:
  storageaccounttype: Premium_LRS
  kind: Managed
 
 ===pvc.yaml========
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 5Gi  
	  
===pod.yaml===========
kind: Pod
apiVersion: v1
metadata:
  name: nginx
spec:
  containers:
    - name: myfrontend
      image: nginx
      volumeMounts:
      - mountPath: "/mnt/azure"
        name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: azure-managed-disk


================================
Azure files Volume example:


kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: azurefile
provisioner: kubernetes.io/azure-file
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=1000
  - gid=1000
  - mfsymlinks
  - nobrl
  - cache=none
parameters:
  skuName: Standard_LRS
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile
  resources:
    requests:
      storage: 5Gi
---
kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
  - name: mypod
    image: nginx:1.15.5
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
    - mountPath: "/mnt/azure"
      name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: azurefile
==================================
Deploy and access a service:

>cat azure-vote.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-back
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-back
  template:
    metadata:
      labels:
        app: azure-vote-back
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: azure-vote-back
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 6379
          name: redis
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
spec:
  ports:
  - port: 6379
  selector:
    app: azure-vote-back
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: azure-vote-front
        image: microsoft/azure-vote-front:v1
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        ports:
        - containerPort: 80
        env:
        - name: REDIS
          value: "azure-vote-back"
---
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: azure-vote-front


>kubectl apply -f azure-vote.yaml
>kubectl get service azure-vote-front --watch
NAME               TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE
azure-vote-front   LoadBalancer   10.0.37.27   52.179.23.131     80:30572/TCP   2m

hit 52.179.23.131  from browser
============================
ACR:
>az group create --name myrg1 --location southeastasia
>az group list -o table
>az acr create --name tamajitacr --resource-group myrg1 --sku Standard  #give a unique acr name
>az acr list -o table
>az acr show --name tamajitacr --resource-group myrg1
>az acr login --name tamajitacr    
OR    
>docker login tamajitacr.azurecr.io
>docker pull nginx
>docker tag nginx tamajitacr.azurecr.io/samples/nginx
>docker push tamajitacr.azurecr.io/samples/nginx
>docker pull tamajitacr.azurecr.io/samples/nginx
>docker run -it --rm -p 8080:80 tamajitacr.azurecr.io/samples/nginx
>az acr repository delete --name myregistry --image samples/nginx:latest
=================================


		
