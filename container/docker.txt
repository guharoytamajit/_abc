Docker is a computer program that performs operating-system-level virtualization also known as containerization.
Docker allows you to package your application with all of its dependencies into  a standardized unit for software development.
Docker is primarily developed for Linux, where it uses the resource isolation features of the Linux kernel.
Unlike hypervisor virtualization, where one or more independent machines run virtually on physical hardware via an intermediation layer, 
containers instead run in user space on top of an operating system’s kernel.
Avoiding the overhead of starting and maintaining virtual machines which is very heavy and slow. 

Advantages:
Continuous Deployment and Testing:
consistency across environments.Eliminate the “it works on my machine” problem once and for all.
Isolation:
Docker ensures your applications and resources are isolated.
Security:
Docker ensures that applications that are running on containers are completely segregated and isolated from each other, 
granting you complete control over traffic flow and management. No Docker container can look into processes running inside another container.
Multi-Cloud Platforms:
Over last few years, all major cloud computing providers, including Amazon Web Services (AWS) and Google Compute Platform (GCP), 
have embraced Docker’s availability and added individual support.



Dockerfile----image------container
.java---------.class-----object


>docker -v #print version
>docker run -it --name ubuntu1 ubuntu:14.04 /bin/bash  #start a container from ubuntu:14.04 image
 to detach ctrl-p + ctrl-q
>docker run -d -it --name ubuntu2 ubuntu:14.04 /bin/bash  #start a container from ubuntu:14.04 image in  detached mode
>docker --help
>docker <cmd> --help
>docker info  #sysyem info
>docker ps  #list all running containers
>docker ps -a  #list all containers
>docker stop <hash|name> # stop a running container
>docker stop $(docker ps -aq)  # stop all running containers
>docker rm <hash|name>  #remove a container. You cannot remove a running container.
>docker start <hash|name> #start one or more stopped containers
>docker start -i <hash|name> # start container in interactive mode
>docker attach <hash|name>    #attach to a running container try: docker attach --detach-keys ctrl-w <hash>
>docker exec <hash|name> <command>  #execute a command on a container
>docker restart <hash|name>  #restarts one or more containers
>docker stats <hash|name> #displays containers resource usage statistics
>docker top <hash|name> #displays running processes
>docker port <hash|name> #displays port mapping
>docker logs <hash|name> #displays log

>docker build -t myimage:1 .
>docker history myimage:1



>docker search "search_text"  #search for image
>docker images #list of images

>docker pull <image>:<tag>  #pull an image from hub
>docker rmi <image_name>  #remove one or more image

============================
FROM busybox:latest
MAINTAINER Tamajit Guha Roy
CMD ["date"]



>docker build -t myimage:1 -f Dockerfile  .
>docker run --dit --name i1 myimage:1 /bin/sh
>docker attach --detach-keys ctrl-w i1
>docker diff i1
>docker commit -m "2 files added" im5 myimage:2
>docker history myimage:2
=====push======================= 
>docker tag myimage:2 guharoytamajit/myimage:2
>docker login
>docker push guharoytamajit/myimage:2
================================
docker export im5 > image.tar
docker import image.tar  mynewimage:1
===============================
docker run --name mysql1 -v //c/Users/mysql:/var/lib/mysql -it -e MYSQL_ROOT_PASSWORD=admin -p 3333:3306  mysql:5.5

docker run --name mysql1 -v //c/Users/mysql2:/var/lib/mysql -it -e MYSQL_ROOT_PASSWORD=admin -p 3333:3306  mysql:5.5

===============================

docker pull registry
docker run -d -p 5000:5000 --name localregistry registry
docker pull alpine
docker pull localhost:5000/alpine
docker tag alpine:latest localhost:5000/alpine
docker push localhost:5000/alpine
docker rmi localhost:5000/alpine
docker pull localhost:5000/alpine

==================================
Docker Restart policy:
By default if a container is stoped it is not restarted.
restart options:
1.no(default):never restart
2.on-failure: restart a container if the exit code indicates error(eg.exit 1) but not if the exit code indicates success(eg.exit 0). You can also specify a maximum number of times Docker 
will automatically restart the container.
3.unless-stopped: always restart unless stopped eg. sudo docker stop testing_restarts
4.always: always restart regardless of error code.

both unless-stopped and always will restart container on docker reboot

Note:
exit 0 =>exit with success
exit 1 =>exit with success


example:
-----crash.sh(this script will exit after 30 seconds)---------
#/bin/bash
sleep 30
exit 1
#exit with failure as exit code is 1
----Dockerfile-------
FROM alpine:3.7
ADD crash.sh /
CMD /bin/bash /crash.sh
---------------------
>sudo docker build -t testing_restarts ./
>sudo docker run -d --name testing_restarts testing_restarts
>sudo docker ps -a
O/P you will see your container will stop after 30 seconds and never starts
------------------------


example2:
>sudo docker run -d --name testing_restarts --restart always testing_restarts
>sudo docker ps -a
O/P you will see even if container stops after 30 secs it will restart again always


example3:
>sudo docker run -d --name testing_restarts --restart on-failure:5 testing_restarts
>sudo docker ps -a
O/P you will see even if container stops after 30 secs it will restart for 5 more times(as max tries are set to five --restart on-failure:5 ).Then finally it will stop.

example4:
-----crash.sh(this script will exit after 30 seconds)---------
#/bin/bash
sleep 30
exit 0
#exit with success as exit code is 0
---------------------------------------------------------
>>sudo docker build -t testing_restarts ./   #rebuilt is must after crash.sh changed
>sudo docker run -d --name testing_restarts --restart on-failure:5 testing_restarts
>sudo docker ps -a
O/P you will see  container stops after 30 secs it will not restart as it exit with success code (exit 0)


Selecting the Best Restart Policy:
A Redis instance, for example, may be a critical component in your environment which should have an always or unless-stopped policy. On the other hand, a batch-processing 
application may need to be restarted until the process successfully completes. In this case, it would make sense to use the on-failures policy.

Either way, with Docker’s restart policy you can now rest assured that next time a Docker host mysteriously reboots at 3 a.m., your containers will be restarted.
=======================================================================================================================
Ulimit:
Ulimit controls the maximum number of system resources that can be allocated to running processes. There is a number of settings. Their current values can be viewed 
by typing: 
>ulimit -a 

Very often the default settings are not the best ones for production setups. Applications such as cassandra or elasticsearch require changing the defaults for open files 
or max memory size.

Soft limit is the effective value right now for that user. The user can increase the soft limit on their own in times of needing more resources, but cannot set the soft limit 
higher than the hard limit.

example: docker run -i -t --rm myapp:2.0 --ulimit nofile=128:256 --ulimit nproc=32:64   #<soft-limit>:<hard-limit>

From version 1.6.0 of Docker, you can set default ulimit values for all containers by specifying --default-ulimit options in the docker configuration file /etc/sysconfig/docker 
by appending the options to the OPTIONS line as follows:
OPTIONS="--ulimit nofile=1280:2560 --ulimit nproc=256:512"
===========================================================================================================================
ONBUILD instruction(create base image)

This is useful if you are building an image which will be used as a base to build other images.
ONBUILD commands are not executed while building the image.It is executed when building child image(ie. while building an image where base image is our image)

example:
-----Dockerfile  for maven:3.3-jdk-8-onbuild------------------------
FROM maven:3-jdk-8
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
#following commands will only execute while building any image which extends this image
ONBUILD ADD . /usr/src/app 
ONBUILD RUN mvn install
------------------------------------------------------------------
-----Dockerfile for myapp------------------------
FROM maven:3.3-jdk-8-onbuild
CMD ["java","-jar","/usr/src/app/target/demo-1.0-SNAPSHOT-jar-with-dependencies.jar"]
------------------------------------------------------------------

following two commands:
ONBUILD ADD . /usr/src/app
ONBUILD RUN mvn install
 
 will not be executed while building maven:3.3-jdk-8-onbuild, But it will be execute while building myapp.
 
 >docker build -t myapp .

 
 WARNING :Never use ONBUILD together with squash (Refer:https://medium.com/@cnadeau_/docker-build-squash-vs-onbuild-28c7cfaccc1f)




 





































docker run -v /c/Users/temp:/volume -it --name spark1  -p 6066:6066  -p 7077:7077 -p 8080:8080 -p 8081:8081 singularities/spark:2.2


docker create -v //c/Users/temp:/volume --name data hello-world
winpty docker run -it --rm --volumes-from data   --name spark1  -p 6066:6066  -p 7077:7077 -p 8080:8080 -p 8081:8081 singularities/spark:2.2

winpty docker run -it --rm -v //c/Users/temp:/volume  --name spark1  -p 6066:6066  -p 7077:7077 -p 8080:8080 -p 8081:8081 singularities/spark:2.2